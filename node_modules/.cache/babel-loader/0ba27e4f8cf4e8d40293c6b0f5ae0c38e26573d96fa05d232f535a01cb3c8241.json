{"ast":null,"code":"var _jsxFileName = \"/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/GameScreen.tsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport PunctuationCharacter from '../components/PunctuationCharacter';\nimport { shuffleArray } from '../utils/shuffle';\nimport { Button as CustomButton } from '../components/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst samplePhrases = {\n  period: [{\n    text: \"I love to play in the park\",\n    answer: \"period\",\n    position: 'end'\n  }, {\n    text: \"The sun is shining today\",\n    answer: \"period\",\n    position: 'end'\n  }],\n  exclamation: [{\n    text: \"What a wonderful day\",\n    answer: \"exclamation\",\n    position: 'end'\n  }, {\n    text: \"I canâ€™t believe it\",\n    answer: \"exclamation\",\n    position: 'end'\n  }],\n  question: [{\n    text: \"How are you today\",\n    answer: \"question\",\n    position: 'end'\n  }, {\n    text: \"Where did you go\",\n    answer: \"question\",\n    position: 'end'\n  }],\n  comma: [{\n    text: \"After the movie we went home\",\n    answer: \"comma\",\n    position: 2\n  },\n  // After index 2 (after \"movie\")\n  {\n    text: \"Yes I would love to\",\n    answer: \"comma\",\n    position: 0\n  } // After index 1 (after \"Yes\")\n  ]\n};\n\n// Add this type to help with calculations\n\nconst GameScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    settings\n  } = useGame();\n  const [currentPhraseIndex, setCurrentPhraseIndex] = React.useState(0);\n  const [currentPhrase, setCurrentPhrase] = React.useState(null);\n  const [selectedMark, setSelectedMark] = React.useState(null);\n  const [isCorrect, setIsCorrect] = React.useState(null);\n  const [score, setScore] = React.useState({\n    correct: 0,\n    incorrect: 0\n  });\n  const [hasStarted, setHasStarted] = React.useState(false);\n  const [timeLeft, setTimeLeft] = React.useState(null);\n  const [gameOverOpen, setGameOverOpen] = React.useState(false);\n  const [activeDropZone, setActiveDropZone] = React.useState(null);\n  const [droppedPosition, setDroppedPosition] = React.useState(null);\n  const phraseRef = React.useRef(null);\n  const phrases = React.useMemo(() => shuffleArray(Object.values(samplePhrases).flat()), []);\n  const [forceLineBreak, setForceLineBreak] = React.useState(false);\n  const [lineBreaks, setLineBreaks] = React.useState([]);\n  const DROP_ZONE_WIDTH = 156; // 140px + 16px margin\n\n  // Enhanced calculation that checks all possible drop zone positions\n  const calculateLineBreaks = React.useCallback(() => {\n    if (!phraseRef.current || !currentPhrase) return [];\n    const words = currentPhrase.text.split(' ');\n    const containerWidth = phraseRef.current.offsetWidth - 160; // Account for padding\n\n    // Create temporary div for measurements\n    const tempDiv = document.createElement('div');\n    tempDiv.style.visibility = 'hidden';\n    tempDiv.style.position = 'absolute';\n    tempDiv.style.fontSize = window.innerWidth < 1024 ? '80px' : '100px';\n    tempDiv.style.fontFamily = '\"Bookman Old Style Regular\", \"Bookman\", \"URW Bookman L\", serif';\n    tempDiv.style.whiteSpace = 'nowrap';\n    document.body.appendChild(tempDiv);\n    const wordWidths = [];\n\n    // Measure all word widths\n    words.forEach(word => {\n      tempDiv.textContent = word;\n      wordWidths.push(tempDiv.offsetWidth);\n    });\n    document.body.removeChild(tempDiv);\n    const breaks = [];\n    let currentLineWidth = 0;\n    let currentLineStart = 0;\n\n    // Check each potential drop zone position\n    for (let i = 0; i < words.length; i++) {\n      currentLineWidth += wordWidths[i];\n\n      // Check if this position needs a drop zone (for commas or end)\n      const needsDropZone = currentPhrase.position === i ||\n      // Comma position\n      currentPhrase.position === 'end' && i === words.length - 1; // End position\n\n      if (needsDropZone) {\n        // If adding drop zone would exceed width, force line break\n        if (currentLineWidth + DROP_ZONE_WIDTH > containerWidth) {\n          breaks.push({\n            beforeWord: i,\n            dropZoneWidth: DROP_ZONE_WIDTH\n          });\n          currentLineWidth = wordWidths[i];\n          currentLineStart = i;\n        }\n      }\n\n      // Check if next word would exceed line width\n      if (i < words.length - 1) {\n        if (currentLineWidth + 16 + wordWidths[i + 1] > containerWidth) {\n          breaks.push({\n            beforeWord: i + 1,\n            dropZoneWidth: 0\n          });\n          currentLineWidth = 0;\n          currentLineStart = i + 1;\n        } else {\n          currentLineWidth += 16; // Add word spacing\n        }\n      }\n    }\n    return breaks;\n  }, [currentPhrase]);\n\n  // Update effect to use new calculation\n  React.useEffect(() => {\n    const updateLineBreaks = () => {\n      setLineBreaks(calculateLineBreaks());\n    };\n    updateLineBreaks();\n    window.addEventListener('resize', updateLineBreaks);\n    return () => window.removeEventListener('resize', updateLineBreaks);\n  }, [calculateLineBreaks]);\n  React.useEffect(() => {\n    setCurrentPhrase(phrases[currentPhraseIndex]);\n  }, [currentPhraseIndex, phrases]);\n  const FEEDBACK_DURATION = 1500;\n  const handleDrop = e => {\n    e.preventDefault();\n    const droppedType = e.dataTransfer.getData('application/punctuation');\n    if (activeDropZone !== null && droppedType) {\n      const isCorrectPosition = (currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.position) === 'end' && activeDropZone === 'end' || (currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.position) === activeDropZone;\n      const isCorrectType = droppedType === (currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.answer);\n      const isCorrect = isCorrectPosition && isCorrectType;\n      setDroppedPosition(activeDropZone);\n      setSelectedMark(droppedType);\n      setIsCorrect(isCorrect);\n      if (isCorrect) {\n        setScore(prev => ({\n          ...prev,\n          correct: prev.correct + 1\n        }));\n      } else {\n        setScore(prev => ({\n          ...prev,\n          incorrect: prev.incorrect + 1\n        }));\n      }\n      setTimeout(() => {\n        setDroppedPosition(null);\n        setSelectedMark(null);\n        setIsCorrect(null);\n        setActiveDropZone(null);\n        goToNextPhrase();\n      }, FEEDBACK_DURATION);\n    }\n  };\n  const calculateDropZone = (dragX, dragY) => {\n    if (!phraseRef.current) return null;\n    const words = phraseRef.current.getElementsByClassName('word');\n    const phraseRect = phraseRef.current.getBoundingClientRect();\n\n    // If the drag is outside the phrase area vertically, return null\n    if (dragY < phraseRect.top - 50 || dragY > phraseRect.bottom + 50) {\n      return null;\n    }\n\n    // Check each word gap for potential drop zones\n    for (let i = 0; i < words.length; i++) {\n      const word = words[i];\n      const wordRect = word.getBoundingClientRect();\n\n      // For middle positions (commas)\n      if (i < words.length - 1) {\n        const nextWord = words[i + 1];\n        const nextWordRect = nextWord.getBoundingClientRect();\n\n        // Only check gaps on the same line\n        if (Math.abs(wordRect.top - nextWordRect.top) < 10) {\n          const gapStart = wordRect.right;\n          const gapEnd = nextWordRect.left;\n          const gapCenter = (gapStart + gapEnd) / 2;\n\n          // If drag position is near this gap\n          if (Math.abs(dragX - gapCenter) < 40) {\n            return i;\n          }\n        }\n      }\n\n      // For end position\n      if (i === words.length - 1) {\n        if (dragX > wordRect.right - 20) {\n          return 'end';\n        }\n      }\n    }\n    return null;\n  };\n  const handleDrag = e => {\n    const {\n      clientX,\n      clientY\n    } = e;\n    const newDropZone = calculateDropZone(clientX, clientY);\n\n    // Add debug logging\n    console.log('Drag position:', {\n      x: clientX,\n      y: clientY\n    });\n    console.log('New drop zone:', newDropZone);\n    if (newDropZone !== activeDropZone) {\n      setActiveDropZone(newDropZone);\n    }\n  };\n  const renderPhrase = () => {\n    if (!currentPhrase) return null;\n    const words = currentPhrase.text.split(' ');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: phraseRef,\n      style: {\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        padding: '40px 80px',\n        minHeight: '300px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '16px',\n          alignItems: 'center',\n          maxWidth: '100%'\n        },\n        children: [words.map((word, index) => {\n          const shouldBreak = lineBreaks.some(b => b.beforeWord === index);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'inline-flex',\n              alignItems: 'center',\n              position: 'relative',\n              width: shouldBreak ? '100%' : 'auto'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"word\",\n              style: {\n                fontFamily: '\"Bookman Old Style Regular\", \"Bookman\", \"URW Bookman L\", serif',\n                fontSize: window.innerWidth < 1024 ? '80px' : '100px',\n                lineHeight: '1.1',\n                whiteSpace: 'nowrap',\n                userSelect: 'none'\n              },\n              children: word\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 17\n            }, this), (activeDropZone === index || droppedPosition === index) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropzone\",\n              \"data-dropzone\": \"true\",\n              onDragOver: e => {\n                e.preventDefault();\n                e.currentTarget.style.border = '6px dashed #666';\n              },\n              onDragLeave: e => {\n                e.preventDefault();\n                e.currentTarget.style.border = '6px dashed #ccc';\n              },\n              onDrop: handleDrop,\n              style: {\n                width: '140px',\n                height: '140px',\n                border: '6px dashed #ccc',\n                borderRadius: '20px',\n                display: 'inline-flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                marginLeft: '16px'\n              },\n              children: selectedMark && droppedPosition === index && /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n                type: selectedMark,\n                isCorrect: isCorrect,\n                onClick: () => {}\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this);\n        }), (activeDropZone === 'end' || droppedPosition === 'end') && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropzone\",\n          \"data-dropzone\": \"true\",\n          onDragOver: e => {\n            e.preventDefault();\n            e.currentTarget.style.border = '6px dashed #666';\n          },\n          onDragLeave: e => {\n            e.preventDefault();\n            e.currentTarget.style.border = '6px dashed #ccc';\n          },\n          onDrop: handleDrop,\n          style: {\n            width: '140px',\n            height: '140px',\n            border: '6px dashed #ccc',\n            borderRadius: '20px',\n            display: 'inline-flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginLeft: '16px'\n          },\n          children: selectedMark && droppedPosition === 'end' && /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n            type: selectedMark,\n            isCorrect: isCorrect,\n            onClick: () => {}\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this);\n  };\n  const goToNextPhrase = () => {\n    const nextIndex = (currentPhraseIndex + 1) % phrases.length;\n    setCurrentPhraseIndex(nextIndex);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        padding: '16px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n        onClick: () => navigate('/select'),\n        children: \"DONE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontFamily: '\"Rethink Sans\", Arial, sans-serif',\n          fontWeight: 800\n        },\n        children: [\"CORRECT: \", score.correct, \" INCORRECT: \", score.incorrect]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), renderPhrase(), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        bottom: 0,\n        left: 0,\n        right: 0,\n        display: 'flex',\n        justifyContent: 'center',\n        gap: '32px',\n        padding: '24px',\n        minHeight: '120px'\n      },\n      children: ['period', 'exclamation', 'question', 'comma'].map(type => /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n        type: type,\n        onClick: () => {},\n        isCorrect: undefined,\n        isDraggable: true,\n        onDrag: handleDrag,\n        onDragEnd: () => setActiveDropZone(null)\n      }, type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 375,\n    columnNumber: 5\n  }, this);\n};\n_s(GameScreen, \"Qd5WRlAGGiYxAbwkpoQc8swTTAw=\", false, function () {\n  return [useNavigate, useGame];\n});\n_c = GameScreen;\nexport default GameScreen;\nvar _c;\n$RefreshReg$(_c, \"GameScreen\");","map":{"version":3,"names":["React","useNavigate","useGame","PunctuationCharacter","shuffleArray","Button","CustomButton","jsxDEV","_jsxDEV","samplePhrases","period","text","answer","position","exclamation","question","comma","GameScreen","_s","navigate","settings","currentPhraseIndex","setCurrentPhraseIndex","useState","currentPhrase","setCurrentPhrase","selectedMark","setSelectedMark","isCorrect","setIsCorrect","score","setScore","correct","incorrect","hasStarted","setHasStarted","timeLeft","setTimeLeft","gameOverOpen","setGameOverOpen","activeDropZone","setActiveDropZone","droppedPosition","setDroppedPosition","phraseRef","useRef","phrases","useMemo","Object","values","flat","forceLineBreak","setForceLineBreak","lineBreaks","setLineBreaks","DROP_ZONE_WIDTH","calculateLineBreaks","useCallback","current","words","split","containerWidth","offsetWidth","tempDiv","document","createElement","style","visibility","fontSize","window","innerWidth","fontFamily","whiteSpace","body","appendChild","wordWidths","forEach","word","textContent","push","removeChild","breaks","currentLineWidth","currentLineStart","i","length","needsDropZone","beforeWord","dropZoneWidth","useEffect","updateLineBreaks","addEventListener","removeEventListener","FEEDBACK_DURATION","handleDrop","e","preventDefault","droppedType","dataTransfer","getData","isCorrectPosition","isCorrectType","prev","setTimeout","goToNextPhrase","calculateDropZone","dragX","dragY","getElementsByClassName","phraseRect","getBoundingClientRect","top","bottom","wordRect","nextWord","nextWordRect","Math","abs","gapStart","right","gapEnd","left","gapCenter","handleDrag","clientX","clientY","newDropZone","console","log","x","y","renderPhrase","ref","width","height","display","justifyContent","alignItems","padding","minHeight","children","flexWrap","gap","maxWidth","map","index","shouldBreak","some","b","className","lineHeight","userSelect","fileName","_jsxFileName","lineNumber","columnNumber","onDragOver","currentTarget","border","onDragLeave","onDrop","borderRadius","marginLeft","type","onClick","nextIndex","flexDirection","fontWeight","undefined","isDraggable","onDrag","onDragEnd","_c","$RefreshReg$"],"sources":["/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/GameScreen.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport PunctuationCharacter from '../components/PunctuationCharacter';\nimport { shuffleArray } from '../utils/shuffle';\nimport { Button as CustomButton } from '../components/Button';\n\ntype Phrase = {\n  text: string;\n  answer: string;\n  position: 'end' | number; // 'end' or index where punctuation should go\n};\n\ntype PhraseCollection = {\n  period: Phrase[];\n  exclamation: Phrase[];\n  question: Phrase[];\n  comma: Phrase[];\n};\n\nconst samplePhrases: PhraseCollection = {\n  period: [\n    { text: \"I love to play in the park\", answer: \"period\", position: 'end' },\n    { text: \"The sun is shining today\", answer: \"period\", position: 'end' },\n  ],\n  exclamation: [\n    { text: \"What a wonderful day\", answer: \"exclamation\", position: 'end' },\n    { text: \"I canâ€™t believe it\", answer: \"exclamation\", position: 'end' },\n  ],\n  question: [\n    { text: \"How are you today\", answer: \"question\", position: 'end' },\n    { text: \"Where did you go\", answer: \"question\", position: 'end' },\n  ],\n  comma: [\n    { text: \"After the movie we went home\", answer: \"comma\", position: 2 }, // After index 2 (after \"movie\")\n    { text: \"Yes I would love to\", answer: \"comma\", position: 0 }, // After index 1 (after \"Yes\")\n  ],\n};\n\ntype PunctuationType = 'period' | 'exclamation' | 'question' | 'comma';\n\n// Add this type to help with calculations\ntype LineBreakInfo = {\n  beforeWord: number | null;  // Index of word to break before\n  dropZoneWidth: number;      // Width needed for the drop zone\n};\n\nconst GameScreen = () => {\n  const navigate = useNavigate();\n  const { settings } = useGame();\n  const [currentPhraseIndex, setCurrentPhraseIndex] = React.useState(0);\n  const [currentPhrase, setCurrentPhrase] = React.useState<Phrase | null>(null);\n  const [selectedMark, setSelectedMark] = React.useState<PunctuationType | null>(null);\n  const [isCorrect, setIsCorrect] = React.useState<boolean | null>(null);\n  const [score, setScore] = React.useState({ correct: 0, incorrect: 0 });\n  const [hasStarted, setHasStarted] = React.useState(false);\n  const [timeLeft, setTimeLeft] = React.useState<number | null>(null);\n  const [gameOverOpen, setGameOverOpen] = React.useState(false);\n  const [activeDropZone, setActiveDropZone] = React.useState<number | 'end' | null>(null);\n  const [droppedPosition, setDroppedPosition] = React.useState<number | 'end' | null>(null);\n  \n  const phraseRef = React.useRef<HTMLDivElement>(null);\n  const phrases = React.useMemo(() => shuffleArray(Object.values(samplePhrases).flat()), []);\n\n  const [forceLineBreak, setForceLineBreak] = React.useState(false);\n  const [lineBreaks, setLineBreaks] = React.useState<LineBreakInfo[]>([]);\n\n  const DROP_ZONE_WIDTH = 156; // 140px + 16px margin\n\n  // Enhanced calculation that checks all possible drop zone positions\n  const calculateLineBreaks = React.useCallback(() => {\n    if (!phraseRef.current || !currentPhrase) return [];\n\n    const words = currentPhrase.text.split(' ');\n    const containerWidth = phraseRef.current.offsetWidth - 160; // Account for padding\n    \n    // Create temporary div for measurements\n    const tempDiv = document.createElement('div');\n    tempDiv.style.visibility = 'hidden';\n    tempDiv.style.position = 'absolute';\n    tempDiv.style.fontSize = window.innerWidth < 1024 ? '80px' : '100px';\n    tempDiv.style.fontFamily = '\"Bookman Old Style Regular\", \"Bookman\", \"URW Bookman L\", serif';\n    tempDiv.style.whiteSpace = 'nowrap';\n    document.body.appendChild(tempDiv);\n\n    const wordWidths: number[] = [];\n    \n    // Measure all word widths\n    words.forEach(word => {\n      tempDiv.textContent = word;\n      wordWidths.push(tempDiv.offsetWidth);\n    });\n\n    document.body.removeChild(tempDiv);\n\n    const breaks: LineBreakInfo[] = [];\n    let currentLineWidth = 0;\n    let currentLineStart = 0;\n\n    // Check each potential drop zone position\n    for (let i = 0; i < words.length; i++) {\n      currentLineWidth += wordWidths[i];\n\n      // Check if this position needs a drop zone (for commas or end)\n      const needsDropZone = \n        (currentPhrase.position === i) || // Comma position\n        (currentPhrase.position === 'end' && i === words.length - 1); // End position\n\n      if (needsDropZone) {\n        // If adding drop zone would exceed width, force line break\n        if (currentLineWidth + DROP_ZONE_WIDTH > containerWidth) {\n          breaks.push({\n            beforeWord: i,\n            dropZoneWidth: DROP_ZONE_WIDTH\n          });\n          currentLineWidth = wordWidths[i];\n          currentLineStart = i;\n        }\n      }\n\n      // Check if next word would exceed line width\n      if (i < words.length - 1) {\n        if (currentLineWidth + 16 + wordWidths[i + 1] > containerWidth) {\n          breaks.push({\n            beforeWord: i + 1,\n            dropZoneWidth: 0\n          });\n          currentLineWidth = 0;\n          currentLineStart = i + 1;\n        } else {\n          currentLineWidth += 16; // Add word spacing\n        }\n      }\n    }\n\n    return breaks;\n  }, [currentPhrase]);\n\n  // Update effect to use new calculation\n  React.useEffect(() => {\n    const updateLineBreaks = () => {\n      setLineBreaks(calculateLineBreaks());\n    };\n\n    updateLineBreaks();\n    window.addEventListener('resize', updateLineBreaks);\n    return () => window.removeEventListener('resize', updateLineBreaks);\n  }, [calculateLineBreaks]);\n\n  React.useEffect(() => {\n    setCurrentPhrase(phrases[currentPhraseIndex]);\n  }, [currentPhraseIndex, phrases]);\n\n  const FEEDBACK_DURATION = 1500;\n\n  const handleDrop = (e: React.DragEvent<HTMLElement>) => {\n    e.preventDefault();\n    const droppedType = e.dataTransfer.getData('application/punctuation') as PunctuationType;\n    \n    if (activeDropZone !== null && droppedType) {\n      const isCorrectPosition = \n        (currentPhrase?.position === 'end' && activeDropZone === 'end') ||\n        (currentPhrase?.position === activeDropZone);\n      const isCorrectType = droppedType === currentPhrase?.answer;\n      const isCorrect = isCorrectPosition && isCorrectType;\n\n      setDroppedPosition(activeDropZone);\n      setSelectedMark(droppedType);\n      setIsCorrect(isCorrect);\n\n      if (isCorrect) {\n        setScore(prev => ({ ...prev, correct: prev.correct + 1 }));\n      } else {\n        setScore(prev => ({ ...prev, incorrect: prev.incorrect + 1 }));\n      }\n\n      setTimeout(() => {\n        setDroppedPosition(null);\n        setSelectedMark(null);\n        setIsCorrect(null);\n        setActiveDropZone(null);\n        goToNextPhrase();\n      }, FEEDBACK_DURATION);\n    }\n  };\n\n  const calculateDropZone = (dragX: number, dragY: number) => {\n    if (!phraseRef.current) return null;\n\n    const words = phraseRef.current.getElementsByClassName('word');\n    const phraseRect = phraseRef.current.getBoundingClientRect();\n    \n    // If the drag is outside the phrase area vertically, return null\n    if (dragY < phraseRect.top - 50 || dragY > phraseRect.bottom + 50) {\n      return null;\n    }\n\n    // Check each word gap for potential drop zones\n    for (let i = 0; i < words.length; i++) {\n      const word = words[i];\n      const wordRect = word.getBoundingClientRect();\n      \n      // For middle positions (commas)\n      if (i < words.length - 1) {\n        const nextWord = words[i + 1];\n        const nextWordRect = nextWord.getBoundingClientRect();\n        \n        // Only check gaps on the same line\n        if (Math.abs(wordRect.top - nextWordRect.top) < 10) {\n          const gapStart = wordRect.right;\n          const gapEnd = nextWordRect.left;\n          const gapCenter = (gapStart + gapEnd) / 2;\n          \n          // If drag position is near this gap\n          if (Math.abs(dragX - gapCenter) < 40) {\n            return i;\n          }\n        }\n      }\n      \n      // For end position\n      if (i === words.length - 1) {\n        if (dragX > wordRect.right - 20) {\n          return 'end';\n        }\n      }\n    }\n\n    return null;\n  };\n\n  const handleDrag = (e: React.DragEvent) => {\n    const { clientX, clientY } = e;\n    const newDropZone = calculateDropZone(clientX, clientY);\n    \n    // Add debug logging\n    console.log('Drag position:', { x: clientX, y: clientY });\n    console.log('New drop zone:', newDropZone);\n    \n    if (newDropZone !== activeDropZone) {\n      setActiveDropZone(newDropZone);\n    }\n  };\n\n  const renderPhrase = () => {\n    if (!currentPhrase) return null;\n\n    const words = currentPhrase.text.split(' ');\n    \n    return (\n      <div \n        ref={phraseRef}\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'center',\n          padding: '40px 80px',\n          minHeight: '300px',\n        }}\n      >\n        <div style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '16px',\n          alignItems: 'center',\n          maxWidth: '100%',\n        }}>\n          {words.map((word, index) => {\n            const shouldBreak = lineBreaks.some(b => b.beforeWord === index);\n            \n            return (\n              <div\n                key={index}\n                style={{\n                  display: 'inline-flex',\n                  alignItems: 'center',\n                  position: 'relative',\n                  width: shouldBreak ? '100%' : 'auto',\n                }}\n              >\n                <span \n                  className=\"word\"\n                  style={{\n                    fontFamily: '\"Bookman Old Style Regular\", \"Bookman\", \"URW Bookman L\", serif',\n                    fontSize: window.innerWidth < 1024 ? '80px' : '100px',\n                    lineHeight: '1.1',\n                    whiteSpace: 'nowrap',\n                    userSelect: 'none',\n                  }}\n                >\n                  {word}\n                </span>\n                {(activeDropZone === index || droppedPosition === index) && (\n                  <div\n                    className=\"dropzone\"\n                    data-dropzone=\"true\"\n                    onDragOver={(e) => {\n                      e.preventDefault();\n                      e.currentTarget.style.border = '6px dashed #666';\n                    }}\n                    onDragLeave={(e) => {\n                      e.preventDefault();\n                      e.currentTarget.style.border = '6px dashed #ccc';\n                    }}\n                    onDrop={handleDrop}\n                    style={{\n                      width: '140px',\n                      height: '140px',\n                      border: '6px dashed #ccc',\n                      borderRadius: '20px',\n                      display: 'inline-flex',\n                      justifyContent: 'center',\n                      alignItems: 'center',\n                      marginLeft: '16px',\n                    }}\n                  >\n                    {selectedMark && droppedPosition === index && (\n                      <PunctuationCharacter\n                        type={selectedMark}\n                        isCorrect={isCorrect}\n                        onClick={() => {}}\n                      />\n                    )}\n                  </div>\n                )}\n              </div>\n            );\n          })}\n          {(activeDropZone === 'end' || droppedPosition === 'end') && (\n            <div\n              className=\"dropzone\"\n              data-dropzone=\"true\"\n              onDragOver={(e) => {\n                e.preventDefault();\n                e.currentTarget.style.border = '6px dashed #666';\n              }}\n              onDragLeave={(e) => {\n                e.preventDefault();\n                e.currentTarget.style.border = '6px dashed #ccc';\n              }}\n              onDrop={handleDrop}\n              style={{\n                width: '140px',\n                height: '140px',\n                border: '6px dashed #ccc',\n                borderRadius: '20px',\n                display: 'inline-flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                marginLeft: '16px',\n              }}\n            >\n              {selectedMark && droppedPosition === 'end' && (\n                <PunctuationCharacter\n                  type={selectedMark}\n                  isCorrect={isCorrect}\n                  onClick={() => {}}\n                />\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const goToNextPhrase = () => {\n    const nextIndex = (currentPhraseIndex + 1) % phrases.length;\n    setCurrentPhraseIndex(nextIndex);\n  };\n\n  return (\n    <div style={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'space-between', \n        alignItems: 'center',\n        padding: '16px'\n      }}>\n        <CustomButton onClick={() => navigate('/select')}>\n          DONE\n        </CustomButton>\n        <div style={{ \n          fontFamily: '\"Rethink Sans\", Arial, sans-serif',\n          fontWeight: 800\n        }}>\n          CORRECT: {score.correct} INCORRECT: {score.incorrect}\n        </div>\n      </div>\n\n      {renderPhrase()}\n\n      <div style={{\n        position: 'fixed',\n        bottom: 0,\n        left: 0,\n        right: 0,\n        display: 'flex',\n        justifyContent: 'center',\n        gap: '32px',\n        padding: '24px',\n        minHeight: '120px'\n      }}>\n        {['period', 'exclamation', 'question', 'comma'].map((type) => (\n          <PunctuationCharacter\n            key={type}\n            type={type as PunctuationType}\n            onClick={() => {}}\n            isCorrect={undefined}\n            isDraggable={true}\n            onDrag={handleDrag}\n            onDragEnd={() => setActiveDropZone(null)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default GameScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}