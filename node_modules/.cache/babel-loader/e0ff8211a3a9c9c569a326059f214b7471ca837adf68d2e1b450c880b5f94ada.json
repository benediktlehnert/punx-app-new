{"ast":null,"code":"var _jsxFileName = \"/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/GameScreen.tsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { Box, Typography, Button, Dialog, DialogContent, DialogActions } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport PunctuationCharacter from '../components/PunctuationCharacter';\nimport { shuffleArray } from '../utils/shuffle';\nimport { Button as CustomButton } from '../components/Button';\nimport { vibrate } from '../utils/vibration';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst samplePhrases = {\n  period: [{\n    text: \"I love to play in the park\",\n    answer: \"period\",\n    position: 'end'\n  }, {\n    text: \"The sun is shining today\",\n    answer: \"period\",\n    position: 'end'\n  }],\n  exclamation: [{\n    text: \"What a wonderful day\",\n    answer: \"exclamation\",\n    position: 'end'\n  }, {\n    text: \"I canâ€™t believe it\",\n    answer: \"exclamation\",\n    position: 'end'\n  }],\n  question: [{\n    text: \"How are you today\",\n    answer: \"question\",\n    position: 'end'\n  }, {\n    text: \"Where did you go\",\n    answer: \"question\",\n    position: 'end'\n  }],\n  comma: [{\n    text: \"After the movie we went home\",\n    answer: \"comma\",\n    position: 2\n  },\n  // After index 2 (after \"movie\")\n  {\n    text: \"Yes I would love to\",\n    answer: \"comma\",\n    position: 0\n  } // After index 1 (after \"Yes\")\n  ]\n};\nconst punctuationTypes = ['period', 'exclamation', 'question', 'comma'];\nconst GameOverDialog = ({\n  open,\n  onClose,\n  score\n}) => /*#__PURE__*/_jsxDEV(Dialog, {\n  open: open,\n  onClose: onClose,\n  children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      sx: {\n        mb: 2\n      },\n      children: \"Time's Up!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        color: 'success.main',\n        mb: 1\n      },\n      children: [\"Correct Answers: \", score.correct]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        color: 'error.main',\n        mb: 2\n      },\n      children: [\"Incorrect Answers: \", score.incorrect]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      children: score.correct > score.incorrect ? \"Great job! You're getting really good at this!\" : \"Keep practicing, you're getting better!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onClose,\n      children: \"Play Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 58,\n  columnNumber: 3\n}, this);\n_c = GameOverDialog;\nconst GameScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    punctuationType,\n    settings\n  } = useGame();\n  const [currentPhrase, setCurrentPhrase] = React.useState(null);\n  const [isCorrect, setIsCorrect] = React.useState(null);\n  const [shuffledTypes, setShuffledTypes] = React.useState(['period', 'exclamation', 'question', 'comma']);\n  const [score, setScore] = React.useState({\n    correct: 0,\n    incorrect: 0\n  });\n  const [selectedMark, setSelectedMark] = React.useState(null);\n  const [feedback, setFeedback] = React.useState(null);\n  const [timeLeft, setTimeLeft] = React.useState(null);\n  const [gameOverOpen, setGameOverOpen] = React.useState(false);\n  const [hasStarted, setHasStarted] = React.useState(false);\n  const timerRef = React.useRef(null);\n  const getRandomPhrase = React.useCallback(() => {\n    if (punctuationType === 'shuffle') {\n      // For shuffle mode, get all phrases and pick one randomly\n      const allPhrases = Object.values(samplePhrases).flat();\n      return allPhrases[Math.floor(Math.random() * allPhrases.length)];\n    } else if (punctuationType && samplePhrases[punctuationType]) {\n      // For specific punctuation type\n      const phrases = samplePhrases[punctuationType];\n      return phrases[Math.floor(Math.random() * phrases.length)];\n    }\n    return null;\n  }, [punctuationType]);\n  const loadNewPhrase = React.useCallback(() => {\n    const newPhrase = getRandomPhrase();\n    setCurrentPhrase(newPhrase);\n    setShuffledTypes(shuffleArray(punctuationTypes));\n    setIsCorrect(null);\n    setSelectedMark(null);\n    setFeedback(null);\n  }, [getRandomPhrase]);\n  React.useEffect(() => {\n    loadNewPhrase();\n  }, [loadNewPhrase]);\n  const startTimer = React.useCallback(() => {\n    if (!hasStarted && settings.timer) {\n      setHasStarted(true);\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [hasStarted, settings.timer, settings.timeLimit]);\n  React.useEffect(() => {\n    if (hasStarted && settings.timer && timeLeft !== null && timeLeft > 0) {\n      timerRef.current = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev === null || prev <= 1) {\n            if (timerRef.current) {\n              clearInterval(timerRef.current);\n            }\n            setGameOverOpen(true);\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n      return () => {\n        if (timerRef.current) {\n          clearInterval(timerRef.current);\n        }\n      };\n    }\n  }, [hasStarted, settings.timer, timeLeft]);\n  React.useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, []);\n  const handleFirstInteraction = () => {\n    startTimer();\n  };\n  const getFeedbackMessage = (type, isCorrect) => {\n    if (isCorrect) {\n      return {\n        text: \"Great job! That's exactly right!\",\n        type: 'success'\n      };\n    }\n    const correctType = currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.answer;\n    switch (correctType) {\n      case 'period':\n        return {\n          text: \"This sentence needs a period to show it's complete.\",\n          type: 'error'\n        };\n      case 'question':\n        return {\n          text: \"This is a question, so it needs a question mark.\",\n          type: 'error'\n        };\n      case 'exclamation':\n        return {\n          text: \"This sentence shows strong feeling or emotion, so it needs an exclamation mark!\",\n          type: 'error'\n        };\n      case 'comma':\n        return {\n          text: \"A comma is needed here to separate parts of the sentence.\",\n          type: 'error'\n        };\n      default:\n        return {\n          text: \"That's not quite right. Try again!\",\n          type: 'error'\n        };\n    }\n  };\n  const handleCharacterSelect = type => {\n    if (currentPhrase) {\n      setSelectedMark(type);\n\n      // Trigger vibration before checking correctness\n      vibrate(50);\n      const isCorrectMark = type === currentPhrase.answer;\n      setIsCorrect(isCorrectMark);\n      if (isCorrectMark) {\n        // Additional success vibration pattern\n        setTimeout(() => vibrate(100), 150);\n      }\n    }\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    e.currentTarget.classList.remove('dragover');\n    const droppedType = e.dataTransfer.getData('application/punctuation');\n    console.log('Dropped type:', droppedType); // Add this for debugging\n\n    if (droppedType) {\n      vibrate(50);\n      handleCharacterSelect(droppedType);\n    }\n  };\n  const handleDragOver = e => {\n    e.preventDefault(); // This is crucial for enabling drop\n    e.currentTarget.style.backgroundColor = 'rgba(0, 0, 0, 0.1)';\n  };\n  const handleDragLeave = e => {\n    e.preventDefault();\n    e.currentTarget.style.backgroundColor = 'transparent';\n  };\n  const handleDragStart = e => {\n    startTimer();\n    e.dataTransfer.setData('text/plain', e.currentTarget.id);\n  };\n  const renderPhrase = () => {\n    if (!currentPhrase) return null;\n    const words = currentPhrase.text.split(' ');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontFamily: 'Bookman Old Style Regular, serif',\n          fontSize: window.innerWidth < 600 ? '80px' : window.innerWidth < 960 ? '100px' : window.innerWidth < 1280 ? '120px' : '140px',\n          lineHeight: '1.1',\n          display: 'inline-block',\n          textAlign: 'left',\n          maxWidth: '90%',\n          margin: '0 auto'\n        },\n        children: words.map((word, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [word, (currentPhrase.position === index || index === words.length - 1 && currentPhrase.position === 'end') && /*#__PURE__*/_jsxDEV(\"span\", {\n            \"data-dropzone\": \"true\",\n            style: {\n              display: 'inline-flex',\n              width: '140px',\n              height: '140px',\n              border: '6px dashed #ccc',\n              borderRadius: '20px',\n              margin: '0 16px',\n              verticalAlign: 'top',\n              justifyContent: 'center',\n              alignItems: 'center',\n              transition: 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)',\n              transform: 'scale(1)'\n            },\n            onDrop: e => {\n              e.preventDefault();\n              e.currentTarget.style.transform = 'scale(1)';\n              handleDrop(e);\n            },\n            onDragOver: e => {\n              e.preventDefault();\n              e.currentTarget.style.transform = 'scale(1.1)';\n            },\n            onDragLeave: e => {\n              e.preventDefault();\n              e.currentTarget.style.transform = 'scale(1)';\n            },\n            children: selectedMark && /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n              type: selectedMark,\n              onClick: () => {},\n              isCorrect: isCorrect,\n              isDraggable: false,\n              onSelect: () => {}\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 17\n          }, this), ' ']\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this);\n  };\n  const handleGameOverClose = () => {\n    setGameOverOpen(false);\n    navigate('/select');\n  };\n  const formatTime = seconds => {\n    if (seconds === null) return \"0:00\";\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n  const TimerDisplay = () => /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      position: 'absolute',\n      top: 16,\n      right: 16,\n      backgroundColor: !hasStarted || timeLeft === null ? 'primary.main' : timeLeft < 10 ? 'error.main' : 'primary.main',\n      color: 'white',\n      borderRadius: '50%',\n      width: 80,\n      height: 80,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      transition: 'background-color 0.3s ease',\n      boxShadow: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        fontFamily: 'monospace',\n        fontWeight: 'bold'\n      },\n      children: formatTime(timeLeft)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 331,\n    columnNumber: 5\n  }, this);\n  React.useEffect(() => {\n    if (settings.timer) {\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [settings.timer, settings.timeLimit]);\n  const TopBar = () => /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      padding: '16px',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n      onClick: () => navigate('/select'),\n      children: \"DONE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      sx: {\n        fontFamily: '\"Rethink Sans\", Arial, sans-serif',\n        fontWeight: 800\n      },\n      children: [\"CORRECT: \", score.correct, \" INCORRECT: \", score.incorrect]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 366,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: '100vh',\n      display: 'flex',\n      flexDirection: 'column',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        padding: '24px',\n        paddingBottom: '120px',\n        paddingTop: '12px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          flex: 1,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: renderPhrase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'fixed',\n        bottom: 0,\n        left: 0,\n        right: 0,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        gap: '32px',\n        padding: '24px',\n        minHeight: '120px',\n        backgroundColor: 'transparent',\n        zIndex: 2\n      },\n      children: shuffledTypes.map(type => /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n        type: type,\n        onClick: () => handleCharacterSelect(type),\n        isCorrect: undefined,\n        isDraggable: true,\n        onDragStart: () => setSelectedMark(null),\n        onSelect: handleCharacterSelect\n      }, type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this), settings.timer && /*#__PURE__*/_jsxDEV(TimerDisplay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(GameOverDialog, {\n      open: gameOverOpen,\n      onClose: handleGameOverClose,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 386,\n    columnNumber: 5\n  }, this);\n};\n_s(GameScreen, \"Ksp0oWi+7IAAnqzJ6P3fbs13hxA=\", false, function () {\n  return [useNavigate, useGame];\n});\n_c2 = GameScreen;\nexport default GameScreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"GameOverDialog\");\n$RefreshReg$(_c2, \"GameScreen\");","map":{"version":3,"names":["React","Box","Typography","Button","Dialog","DialogContent","DialogActions","useNavigate","useGame","PunctuationCharacter","shuffleArray","CustomButton","vibrate","jsxDEV","_jsxDEV","samplePhrases","period","text","answer","position","exclamation","question","comma","punctuationTypes","GameOverDialog","open","onClose","score","children","variant","sx","mb","fileName","_jsxFileName","lineNumber","columnNumber","color","correct","incorrect","onClick","_c","GameScreen","_s","navigate","punctuationType","settings","currentPhrase","setCurrentPhrase","useState","isCorrect","setIsCorrect","shuffledTypes","setShuffledTypes","setScore","selectedMark","setSelectedMark","feedback","setFeedback","timeLeft","setTimeLeft","gameOverOpen","setGameOverOpen","hasStarted","setHasStarted","timerRef","useRef","getRandomPhrase","useCallback","allPhrases","Object","values","flat","Math","floor","random","length","phrases","loadNewPhrase","newPhrase","useEffect","startTimer","timer","timeLimit","current","setInterval","prev","clearInterval","handleFirstInteraction","getFeedbackMessage","type","correctType","handleCharacterSelect","isCorrectMark","setTimeout","handleDrop","e","preventDefault","currentTarget","classList","remove","droppedType","dataTransfer","getData","console","log","handleDragOver","style","backgroundColor","handleDragLeave","handleDragStart","setData","id","renderPhrase","words","split","width","textAlign","fontFamily","fontSize","window","innerWidth","lineHeight","display","maxWidth","margin","map","word","index","Fragment","height","border","borderRadius","verticalAlign","justifyContent","alignItems","transition","transform","onDrop","onDragOver","onDragLeave","isDraggable","onSelect","handleGameOverClose","formatTime","seconds","minutes","remainingSeconds","toString","padStart","TimerDisplay","top","right","boxShadow","fontWeight","TopBar","padding","flexDirection","flex","paddingBottom","paddingTop","bottom","left","gap","minHeight","zIndex","undefined","onDragStart","_c2","$RefreshReg$"],"sources":["/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/GameScreen.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Box, Typography, Button, Grid, Dialog, DialogContent, DialogActions } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport PunctuationCharacter from '../components/PunctuationCharacter';\nimport { shuffleArray } from '../utils/shuffle';\nimport { Button as CustomButton } from '../components/Button';\nimport { vibrate } from '../utils/vibration';\n\ntype Phrase = {\n  text: string;\n  answer: string;\n  position: 'end' | number; // 'end' or index where punctuation should go\n};\n\ntype PhraseCollection = {\n  period: Phrase[];\n  exclamation: Phrase[];\n  question: Phrase[];\n  comma: Phrase[];\n};\n\nconst samplePhrases: PhraseCollection = {\n  period: [\n    { text: \"I love to play in the park\", answer: \"period\", position: 'end' },\n    { text: \"The sun is shining today\", answer: \"period\", position: 'end' },\n  ],\n  exclamation: [\n    { text: \"What a wonderful day\", answer: \"exclamation\", position: 'end' },\n    { text: \"I canâ€™t believe it\", answer: \"exclamation\", position: 'end' },\n  ],\n  question: [\n    { text: \"How are you today\", answer: \"question\", position: 'end' },\n    { text: \"Where did you go\", answer: \"question\", position: 'end' },\n  ],\n  comma: [\n    { text: \"After the movie we went home\", answer: \"comma\", position: 2 }, // After index 2 (after \"movie\")\n    { text: \"Yes I would love to\", answer: \"comma\", position: 0 }, // After index 1 (after \"Yes\")\n  ],\n};\n\ntype PunctuationType = 'period' | 'exclamation' | 'question' | 'comma';\n\nconst punctuationTypes: PunctuationType[] = ['period', 'exclamation', 'question', 'comma'];\n\ninterface FeedbackMessage {\n  text: string;\n  type: 'success' | 'error';\n}\n\ninterface GameOverDialogProps {\n  open: boolean;\n  onClose: () => void;\n  score: { correct: number; incorrect: number };\n}\n\nconst GameOverDialog = ({ open, onClose, score }: GameOverDialogProps) => (\n  <Dialog open={open} onClose={onClose}>\n    <DialogContent>\n      <Typography variant=\"h4\" sx={{ mb: 2 }}>Time's Up!</Typography>\n      <Typography variant=\"h6\" sx={{ color: 'success.main', mb: 1 }}>\n        Correct Answers: {score.correct}\n      </Typography>\n      <Typography variant=\"h6\" sx={{ color: 'error.main', mb: 2 }}>\n        Incorrect Answers: {score.incorrect}\n      </Typography>\n      <Typography variant=\"body1\">\n        {score.correct > score.incorrect \n          ? \"Great job! You're getting really good at this!\" \n          : \"Keep practicing, you're getting better!\"}\n      </Typography>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose}>Play Again</Button>\n    </DialogActions>\n  </Dialog>\n);\n\nconst GameScreen = () => {\n  const navigate = useNavigate();\n  const { punctuationType, settings } = useGame();\n  const [currentPhrase, setCurrentPhrase] = React.useState<Phrase | null>(null);\n  const [isCorrect, setIsCorrect] = React.useState<boolean | null>(null);\n  const [shuffledTypes, setShuffledTypes] = React.useState<PunctuationType[]>(['period', 'exclamation', 'question', 'comma']);\n  const [score, setScore] = React.useState({ correct: 0, incorrect: 0 });\n  const [selectedMark, setSelectedMark] = React.useState<PunctuationType | null>(null);\n  const [feedback, setFeedback] = React.useState<FeedbackMessage | null>(null);\n  const [timeLeft, setTimeLeft] = React.useState<number | null>(null);\n  const [gameOverOpen, setGameOverOpen] = React.useState(false);\n  const [hasStarted, setHasStarted] = React.useState(false);\n  const timerRef = React.useRef<NodeJS.Timeout | null>(null);\n\n  const getRandomPhrase = React.useCallback(() => {\n    if (punctuationType === 'shuffle') {\n      // For shuffle mode, get all phrases and pick one randomly\n      const allPhrases = Object.values(samplePhrases).flat();\n      return allPhrases[Math.floor(Math.random() * allPhrases.length)];\n    } else if (punctuationType && samplePhrases[punctuationType]) {\n      // For specific punctuation type\n      const phrases = samplePhrases[punctuationType];\n      return phrases[Math.floor(Math.random() * phrases.length)];\n    }\n    return null;\n  }, [punctuationType]);\n\n  const loadNewPhrase = React.useCallback(() => {\n    const newPhrase = getRandomPhrase();\n    setCurrentPhrase(newPhrase);\n    setShuffledTypes(shuffleArray(punctuationTypes));\n    setIsCorrect(null);\n    setSelectedMark(null);\n    setFeedback(null);\n  }, [getRandomPhrase]);\n\n  React.useEffect(() => {\n    loadNewPhrase();\n  }, [loadNewPhrase]);\n\n  const startTimer = React.useCallback(() => {\n    if (!hasStarted && settings.timer) {\n      setHasStarted(true);\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [hasStarted, settings.timer, settings.timeLimit]);\n\n  React.useEffect(() => {\n    if (hasStarted && settings.timer && timeLeft !== null && timeLeft > 0) {\n      timerRef.current = setInterval(() => {\n        setTimeLeft((prev) => {\n          if (prev === null || prev <= 1) {\n            if (timerRef.current) {\n              clearInterval(timerRef.current);\n            }\n            setGameOverOpen(true);\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n\n      return () => {\n        if (timerRef.current) {\n          clearInterval(timerRef.current);\n        }\n      };\n    }\n  }, [hasStarted, settings.timer, timeLeft]);\n\n  React.useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, []);\n\n  const handleFirstInteraction = () => {\n    startTimer();\n  };\n\n  const getFeedbackMessage = (type: string, isCorrect: boolean): FeedbackMessage => {\n    if (isCorrect) {\n      return {\n        text: \"Great job! That's exactly right!\",\n        type: 'success'\n      };\n    }\n\n    const correctType = currentPhrase?.answer;\n    switch (correctType) {\n      case 'period':\n        return {\n          text: \"This sentence needs a period to show it's complete.\",\n          type: 'error'\n        };\n      case 'question':\n        return {\n          text: \"This is a question, so it needs a question mark.\",\n          type: 'error'\n        };\n      case 'exclamation':\n        return {\n          text: \"This sentence shows strong feeling or emotion, so it needs an exclamation mark!\",\n          type: 'error'\n        };\n      case 'comma':\n        return {\n          text: \"A comma is needed here to separate parts of the sentence.\",\n          type: 'error'\n        };\n      default:\n        return {\n          text: \"That's not quite right. Try again!\",\n          type: 'error'\n        };\n    }\n  };\n\n  const handleCharacterSelect = (type: PunctuationType) => {\n    if (currentPhrase) {\n      setSelectedMark(type);\n      \n      // Trigger vibration before checking correctness\n      vibrate(50);\n      \n      const isCorrectMark = type === currentPhrase.answer;\n      setIsCorrect(isCorrectMark);\n      \n      if (isCorrectMark) {\n        // Additional success vibration pattern\n        setTimeout(() => vibrate(100), 150);\n      }\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent<HTMLElement>) => {\n    e.preventDefault();\n    e.currentTarget.classList.remove('dragover');\n    const droppedType = e.dataTransfer.getData('application/punctuation') as PunctuationType;\n    \n    console.log('Dropped type:', droppedType); // Add this for debugging\n    \n    if (droppedType) {\n      vibrate(50);\n      handleCharacterSelect(droppedType);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault(); // This is crucial for enabling drop\n    e.currentTarget.style.backgroundColor = 'rgba(0, 0, 0, 0.1)';\n  };\n\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.currentTarget.style.backgroundColor = 'transparent';\n  };\n\n  const handleDragStart = (e: React.DragEvent) => {\n    startTimer();\n    e.dataTransfer.setData('text/plain', e.currentTarget.id);\n  };\n\n  const renderPhrase = () => {\n    if (!currentPhrase) return null;\n\n    const words = currentPhrase.text.split(' ');\n    \n    return (\n      <div style={{ \n        width: '100%',\n        textAlign: 'center'\n      }}>\n        <div style={{\n          fontFamily: 'Bookman Old Style Regular, serif',\n          fontSize: window.innerWidth < 600 ? '80px' : \n                   window.innerWidth < 960 ? '100px' : \n                   window.innerWidth < 1280 ? '120px' : '140px',\n          lineHeight: '1.1',\n          display: 'inline-block',\n          textAlign: 'left',\n          maxWidth: '90%',\n          margin: '0 auto'\n        }}>\n          {words.map((word, index) => (\n            <React.Fragment key={index}>\n              {word}\n              {(currentPhrase.position === index || \n                (index === words.length - 1 && currentPhrase.position === 'end')) && (\n                <span\n                  data-dropzone=\"true\"\n                  style={{\n                    display: 'inline-flex',\n                    width: '140px',\n                    height: '140px',\n                    border: '6px dashed #ccc',\n                    borderRadius: '20px',\n                    margin: '0 16px',\n                    verticalAlign: 'top',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    transition: 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)',\n                    transform: 'scale(1)'\n                  }}\n                  onDrop={(e) => {\n                    e.preventDefault();\n                    e.currentTarget.style.transform = 'scale(1)';\n                    handleDrop(e);\n                  }}\n                  onDragOver={(e) => {\n                    e.preventDefault();\n                    e.currentTarget.style.transform = 'scale(1.1)';\n                  }}\n                  onDragLeave={(e) => {\n                    e.preventDefault();\n                    e.currentTarget.style.transform = 'scale(1)';\n                  }}\n                >\n                  {selectedMark && (\n                    <PunctuationCharacter\n                      type={selectedMark}\n                      onClick={() => {}}\n                      isCorrect={isCorrect}\n                      isDraggable={false}\n                      onSelect={() => {}}\n                    />\n                  )}\n                </span>\n              )}\n              {' '}\n            </React.Fragment>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const handleGameOverClose = () => {\n    setGameOverOpen(false);\n    navigate('/select');\n  };\n\n  const formatTime = (seconds: number | null): string => {\n    if (seconds === null) return \"0:00\";\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const TimerDisplay = () => (\n    <Box sx={{ \n      position: 'absolute',\n      top: 16,\n      right: 16,\n      backgroundColor: (!hasStarted || timeLeft === null) ? 'primary.main' :\n                      timeLeft < 10 ? 'error.main' : 'primary.main',\n      color: 'white',\n      borderRadius: '50%',\n      width: 80,\n      height: 80,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      transition: 'background-color 0.3s ease',\n      boxShadow: 2\n    }}>\n      <Typography \n        variant=\"h6\" \n        sx={{ \n          fontFamily: 'monospace',\n          fontWeight: 'bold'\n        }}\n      >\n        {formatTime(timeLeft)}\n      </Typography>\n    </Box>\n  );\n\n  React.useEffect(() => {\n    if (settings.timer) {\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [settings.timer, settings.timeLimit]);\n\n  const TopBar = () => (\n    <Box sx={{ \n      display: 'flex', \n      justifyContent: 'space-between', \n      alignItems: 'center',\n      padding: '16px',\n      width: '100%'\n    }}>\n      <CustomButton onClick={() => navigate('/select')}>\n        DONE\n      </CustomButton>\n      <Typography sx={{ \n        fontFamily: '\"Rethink Sans\", Arial, sans-serif',\n        fontWeight: 800\n      }}>\n        CORRECT: {score.correct} INCORRECT: {score.incorrect}\n      </Typography>\n    </Box>\n  );\n\n  return (\n    <Box sx={{ \n      height: '100vh',\n      display: 'flex',\n      flexDirection: 'column',\n      position: 'relative'\n    }}>\n      <TopBar />\n      \n      <Box sx={{ \n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        padding: '24px',\n        paddingBottom: '120px',\n        paddingTop: '12px',\n      }}>\n        <Box sx={{ \n          flex: 1,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }}>\n          {renderPhrase()}\n        </Box>\n      </Box>\n\n      <Box sx={{ \n        position: 'fixed',\n        bottom: 0,\n        left: 0,\n        right: 0,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        gap: '32px',\n        padding: '24px',\n        minHeight: '120px',\n        backgroundColor: 'transparent',\n        zIndex: 2\n      }}>\n        {shuffledTypes.map((type) => (\n          <PunctuationCharacter\n            key={type}\n            type={type}\n            onClick={() => handleCharacterSelect(type)}\n            isCorrect={undefined}\n            isDraggable={true}\n            onDragStart={() => setSelectedMark(null)}\n            onSelect={handleCharacterSelect}\n          />\n        ))}\n      </Box>\n\n      {settings.timer && <TimerDisplay />}\n      <GameOverDialog \n        open={gameOverOpen} \n        onClose={handleGameOverClose}\n        score={score}\n      />\n    </Box>\n  );\n};\n\nexport default GameScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}