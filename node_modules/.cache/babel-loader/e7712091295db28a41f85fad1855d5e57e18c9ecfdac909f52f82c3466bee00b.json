{"ast":null,"code":"import*as React from'react';import{Box,Grid,Typography}from'@mui/material';import{useNavigate}from'react-router-dom';import{useGame}from'../context/GameContext';import SettingsIcon from'@mui/icons-material/Settings';import SettingsModal from'../components/SettingsModal';import{Button}from'../components/Button';import{IconButton}from'@mui/material';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const characters=[{id:'period',name:'Peri',type:'period'},{id:'exclamation',name:'Ex',type:'exclamation'},{id:'question',name:'Quest',type:'question'},{id:'comma',name:'Curly',type:'comma'},{id:'shuffle',name:'Shuffle',type:'shuffle'}];const CharacterSelectScreen=()=>{const navigate=useNavigate();const{setPunctuationType,settings,setSettings}=useGame();const[settingsOpen,setSettingsOpen]=React.useState(false);const handleSettingsOpen=()=>setSettingsOpen(true);const handleSettingsClose=()=>setSettingsOpen(false);const handleSettingsChange=newSettings=>{setSettings(newSettings);};const handleCharacterSelect=type=>{setPunctuationType(type);navigate('/game');};return/*#__PURE__*/_jsxs(Box,{sx:{p:4,textAlign:'center',position:'relative'},children:[/*#__PURE__*/_jsx(Button,{onClick:()=>navigate('/'),sx:{position:'absolute',top:16,left:16},children:\"Back\"}),/*#__PURE__*/_jsx(IconButton,{onClick:handleSettingsOpen,sx:{position:'absolute',top:16,right:16,transition:'all 0.3s ease','&:hover':{transform:'scale(1.1)'}},children:/*#__PURE__*/_jsx(SettingsIcon,{})}),/*#__PURE__*/_jsx(Typography,{variant:\"h4\",sx:{mb:4},children:\"Choose Your Character\"}),/*#__PURE__*/_jsx(Grid,{container:true,spacing:3,justifyContent:\"center\",children:characters.map(character=>/*#__PURE__*/_jsx(Grid,{item:true,children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",size:\"large\",onClick:()=>handleCharacterSelect(character.type),sx:{minWidth:120},children:character.name})},character.id))}),/*#__PURE__*/_jsx(SettingsModal,{open:settingsOpen,onClose:handleSettingsClose,settings:settings,onSettingsChange:handleSettingsChange})]});};export default CharacterSelectScreen;","map":{"version":3,"names":["React","Box","Grid","Typography","useNavigate","useGame","SettingsIcon","SettingsModal","Button","IconButton","jsx","_jsx","jsxs","_jsxs","characters","id","name","type","CharacterSelectScreen","navigate","setPunctuationType","settings","setSettings","settingsOpen","setSettingsOpen","useState","handleSettingsOpen","handleSettingsClose","handleSettingsChange","newSettings","handleCharacterSelect","sx","p","textAlign","position","children","onClick","top","left","right","transition","transform","variant","mb","container","spacing","justifyContent","map","character","item","size","minWidth","open","onClose","onSettingsChange"],"sources":["/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/CharacterSelectScreen.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Box, Grid, Typography } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport SettingsModal from '../components/SettingsModal';\nimport { Button } from '../components/Button';\nimport { IconButton } from '@mui/material';\n\nconst characters = [\n  { id: 'period', name: 'Peri', type: 'period' },\n  { id: 'exclamation', name: 'Ex', type: 'exclamation' },\n  { id: 'question', name: 'Quest', type: 'question' },\n  { id: 'comma', name: 'Curly', type: 'comma' },\n  { id: 'shuffle', name: 'Shuffle', type: 'shuffle' }\n];\n\nconst CharacterSelectScreen = () => {\n  const navigate = useNavigate();\n  const { setPunctuationType, settings, setSettings } = useGame();\n  const [settingsOpen, setSettingsOpen] = React.useState(false);\n\n  const handleSettingsOpen = () => setSettingsOpen(true);\n  const handleSettingsClose = () => setSettingsOpen(false);\n  const handleSettingsChange = (newSettings: any) => {\n    setSettings(newSettings);\n  };\n\n  const handleCharacterSelect = (type: string) => {\n    setPunctuationType(type as any);\n    navigate('/game');\n  };\n\n  return (\n    <Box sx={{ p: 4, textAlign: 'center', position: 'relative' }}>\n      <Button \n        onClick={() => navigate('/')} \n        sx={{ position: 'absolute', top: 16, left: 16 }}\n      >\n        Back\n      </Button>\n\n      <IconButton\n        onClick={handleSettingsOpen}\n        sx={{ \n          position: 'absolute', \n          top: 16, \n          right: 16,\n          transition: 'all 0.3s ease',\n          '&:hover': {\n            transform: 'scale(1.1)',\n          }\n        }}\n      >\n        <SettingsIcon />\n      </IconButton>\n\n      <Typography variant=\"h4\" sx={{ mb: 4 }}>\n        Choose Your Character\n      </Typography>\n\n      <Grid container spacing={3} justifyContent=\"center\">\n        {characters.map((character) => (\n          <Grid item key={character.id}>\n            <Button\n              variant=\"contained\"\n              size=\"large\"\n              onClick={() => handleCharacterSelect(character.type)}\n              sx={{ minWidth: 120 }}\n            >\n              {character.name}\n            </Button>\n          </Grid>\n        ))}\n      </Grid>\n\n      <SettingsModal\n        open={settingsOpen}\n        onClose={handleSettingsClose}\n        settings={settings}\n        onSettingsChange={handleSettingsChange}\n      />\n    </Box>\n  );\n};\n\nexport default CharacterSelectScreen; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}