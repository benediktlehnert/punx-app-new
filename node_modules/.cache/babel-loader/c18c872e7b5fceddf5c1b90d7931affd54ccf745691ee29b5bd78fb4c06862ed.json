{"ast":null,"code":"var _jsxFileName = \"/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/GameScreen.tsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { Box, Typography, Button, Dialog, DialogContent, DialogActions } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport PunctuationCharacter from '../components/PunctuationCharacter';\nimport { shuffleArray } from '../utils/shuffle';\nimport { Button as CustomButton } from '../components/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst samplePhrases = {\n  period: [{\n    text: \"I love to play in the park\",\n    answer: \"period\",\n    position: 'end'\n  }, {\n    text: \"The sun is shining today\",\n    answer: \"period\",\n    position: 'end'\n  }],\n  exclamation: [{\n    text: \"What a wonderful day\",\n    answer: \"exclamation\",\n    position: 'end'\n  }, {\n    text: \"I canâ€™t believe it\",\n    answer: \"exclamation\",\n    position: 'end'\n  }],\n  question: [{\n    text: \"How are you today\",\n    answer: \"question\",\n    position: 'end'\n  }, {\n    text: \"Where did you go\",\n    answer: \"question\",\n    position: 'end'\n  }],\n  comma: [{\n    text: \"After the movie we went home\",\n    answer: \"comma\",\n    position: 2\n  },\n  // After index 2 (after \"movie\")\n  {\n    text: \"Yes I would love to\",\n    answer: \"comma\",\n    position: 0\n  } // After index 1 (after \"Yes\")\n  ]\n};\nconst punctuationTypes = ['period', 'exclamation', 'question', 'comma'];\nconst GameOverDialog = ({\n  open,\n  onClose,\n  score\n}) => /*#__PURE__*/_jsxDEV(Dialog, {\n  open: open,\n  onClose: onClose,\n  children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      sx: {\n        mb: 2\n      },\n      children: \"Time's Up!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        color: 'success.main',\n        mb: 1\n      },\n      children: [\"Correct Answers: \", score.correct]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        color: 'error.main',\n        mb: 2\n      },\n      children: [\"Incorrect Answers: \", score.incorrect]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      children: score.correct > score.incorrect ? \"Great job! You're getting really good at this!\" : \"Keep practicing, you're getting better!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onClose,\n      children: \"Play Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 57,\n  columnNumber: 3\n}, this);\n_c = GameOverDialog;\nconst GameScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    punctuationType,\n    settings\n  } = useGame();\n  const [currentPhraseIndex, setCurrentPhraseIndex] = React.useState(0);\n  const [currentPhrase, setCurrentPhrase] = React.useState(null);\n  const [selectedMark, setSelectedMark] = React.useState(null);\n  const [isCorrect, setIsCorrect] = React.useState(null);\n  const [score, setScore] = React.useState({\n    correct: 0,\n    incorrect: 0\n  });\n  const [hasStarted, setHasStarted] = React.useState(false);\n  const [timeLeft, setTimeLeft] = React.useState(null);\n  const [gameOverOpen, setGameOverOpen] = React.useState(false);\n  const [shuffledTypes, setShuffledTypes] = React.useState(['period', 'exclamation', 'question', 'comma']);\n  const [feedback, setFeedback] = React.useState(null);\n  const timerRef = React.useRef(null);\n  const [dragPosition, setDragPosition] = React.useState(null);\n  const [activeDropZone, setActiveDropZone] = React.useState(null);\n  const phraseRef = React.useRef(null);\n  const phrases = React.useMemo(() => shuffleArray(Object.values(samplePhrases).flat()), []);\n  React.useEffect(() => {\n    setCurrentPhrase(phrases[currentPhraseIndex]);\n  }, [currentPhraseIndex, phrases]);\n  const startTimer = React.useCallback(() => {\n    if (!hasStarted && settings.timer) {\n      setHasStarted(true);\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [hasStarted, settings.timer, settings.timeLimit]);\n  React.useEffect(() => {\n    if (hasStarted && settings.timer && timeLeft !== null && timeLeft > 0) {\n      timerRef.current = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev === null || prev <= 1) {\n            if (timerRef.current) {\n              clearInterval(timerRef.current);\n            }\n            setGameOverOpen(true);\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n      return () => {\n        if (timerRef.current) {\n          clearInterval(timerRef.current);\n        }\n      };\n    }\n  }, [hasStarted, settings.timer, timeLeft]);\n  React.useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, []);\n  const handleFirstInteraction = () => {\n    startTimer();\n  };\n  const getFeedbackMessage = (type, isCorrect) => {\n    if (isCorrect) {\n      return {\n        text: \"Great job! That's exactly right!\",\n        type: 'success'\n      };\n    }\n    const correctType = currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.answer;\n    switch (correctType) {\n      case 'period':\n        return {\n          text: \"This sentence needs a period to show it's complete.\",\n          type: 'error'\n        };\n      case 'question':\n        return {\n          text: \"This is a question, so it needs a question mark.\",\n          type: 'error'\n        };\n      case 'exclamation':\n        return {\n          text: \"This sentence shows strong feeling or emotion, so it needs an exclamation mark!\",\n          type: 'error'\n        };\n      case 'comma':\n        return {\n          text: \"A comma is needed here to separate parts of the sentence.\",\n          type: 'error'\n        };\n      default:\n        return {\n          text: \"That's not quite right. Try again!\",\n          type: 'error'\n        };\n    }\n  };\n  const handleCharacterSelect = type => {\n    if (!currentPhrase) return;\n\n    // Start timer on first interaction if not started\n    if (!hasStarted) {\n      startTimer();\n    }\n    setSelectedMark(type);\n    const isCorrectMark = type === currentPhrase.answer;\n    setIsCorrect(isCorrectMark);\n    if (isCorrectMark) {\n      setScore(prev => ({\n        ...prev,\n        correct: prev.correct + 1\n      }));\n    } else {\n      setScore(prev => ({\n        ...prev,\n        incorrect: prev.incorrect + 1\n      }));\n    }\n\n    // Wait for animation then move to next phrase\n    setTimeout(() => {\n      setSelectedMark(null);\n      setIsCorrect(null);\n      goToNextPhrase();\n    }, 1000);\n  };\n  const goToNextPhrase = () => {\n    const nextIndex = (currentPhraseIndex + 1) % phrases.length;\n    setCurrentPhraseIndex(nextIndex);\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    const droppedType = e.dataTransfer.getData('application/punctuation');\n    if (activeDropZone !== null && droppedType) {\n      const isCorrectPosition = (currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.position) === 'end' && activeDropZone === 'end' || (currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.position) === activeDropZone;\n      const isCorrectType = droppedType === (currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.answer);\n      const isCorrect = isCorrectPosition && isCorrectType;\n\n      // Keep both the drop zone and character visible\n      setSelectedMark(droppedType);\n      setIsCorrect(isCorrect);\n\n      // Update score\n      if (isCorrect) {\n        setScore(prev => ({\n          ...prev,\n          correct: prev.correct + 1\n        }));\n      } else {\n        setScore(prev => ({\n          ...prev,\n          incorrect: prev.incorrect + 1\n        }));\n      }\n\n      // Wait for animation then move to next phrase\n      setTimeout(() => {\n        setSelectedMark(null);\n        setIsCorrect(null);\n        setActiveDropZone(null);\n        goToNextPhrase();\n      }, 1000);\n    }\n  };\n  const handleDragOver = e => {\n    e.preventDefault(); // This is crucial for enabling drop\n    e.currentTarget.style.backgroundColor = 'rgba(0, 0, 0, 0.1)';\n  };\n  const handleDragLeave = e => {\n    e.preventDefault();\n    e.currentTarget.style.backgroundColor = 'transparent';\n  };\n  const handleDragStart = e => {\n    startTimer();\n    e.dataTransfer.setData('text/plain', e.currentTarget.id);\n  };\n  const calculateDropZone = (dragX, dragY) => {\n    if (!phraseRef.current) return null;\n    const phraseRect = phraseRef.current.getBoundingClientRect();\n    const words = phraseRef.current.getElementsByClassName('word');\n\n    // Check if we're near the end of the phrase\n    const lastWord = words[words.length - 1];\n    const lastWordRect = lastWord.getBoundingClientRect();\n    if (dragX > lastWordRect.right - 20) {\n      return 'end';\n    }\n\n    // Check positions between words\n    for (let i = 0; i < words.length - 1; i++) {\n      const word = words[i];\n      const nextWord = words[i + 1];\n      const wordRect = word.getBoundingClientRect();\n      const nextWordRect = nextWord.getBoundingClientRect();\n      const gapCenter = (wordRect.right + nextWordRect.left) / 2;\n      if (Math.abs(dragX - gapCenter) < 40) {\n        return i;\n      }\n    }\n    return null;\n  };\n  const renderDropZone = position => {\n    const isActive = activeDropZone === position;\n    const showDropZone = isActive || selectedMark && activeDropZone === position;\n    if (!showDropZone) return null;\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"dropzone\",\n      \"data-dropzone\": \"true\",\n      onDragEnter: e => {\n        e.preventDefault();\n        e.currentTarget.style.backgroundColor = 'rgba(0, 0, 0, 0.1)';\n      },\n      onDragOver: e => {\n        e.preventDefault();\n        e.currentTarget.style.border = '6px dashed #666';\n      },\n      onDragLeave: e => {\n        e.preventDefault();\n        e.currentTarget.style.border = '6px dashed #ccc';\n        e.currentTarget.style.backgroundColor = 'transparent';\n      },\n      onDrop: handleDrop,\n      style: {\n        display: 'inline-flex',\n        width: '140px',\n        height: '140px',\n        border: '6px dashed #ccc',\n        borderRadius: '20px',\n        position: position === 'end' ? 'relative' : 'absolute',\n        transform: position === 'end' ? 'none' : 'translateX(-150px)',\n        marginLeft: position === 'end' ? '16px' : '0',\n        justifyContent: 'center',\n        alignItems: 'center',\n        transition: 'all 0.2s ease'\n      },\n      children: selectedMark && activeDropZone === position && /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n        type: selectedMark,\n        isCorrect: isCorrect,\n        onClick: () => {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this);\n  };\n  const renderPhrase = () => {\n    if (!currentPhrase) return null;\n    const words = currentPhrase.text.split(' ');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: phraseRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontFamily: '\"Bookman Old Style Regular\", \"Bookman\", \"URW Bookman L\", serif',\n          fontWeight: 'normal',\n          fontSize: window.innerWidth < 600 ? '80px' : '120px',\n          lineHeight: '1.1',\n          display: 'inline-block',\n          textAlign: 'left',\n          maxWidth: '90%',\n          margin: '0 auto'\n        },\n        children: [words.map((word, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"word\",\n            style: {\n              display: 'inline-block',\n              transition: 'margin 0.3s ease',\n              marginRight: activeDropZone === index || selectedMark && activeDropZone === index ? '140px' : '16px'\n            },\n            children: word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 15\n          }, this), renderDropZone(index)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 13\n        }, this)), renderDropZone('end')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this);\n  };\n  const handleGameOverClose = () => {\n    setGameOverOpen(false);\n    navigate('/select');\n  };\n  const formatTime = seconds => {\n    if (seconds === null) return \"0:00\";\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n  const TimerDisplay = () => /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      position: 'absolute',\n      top: 16,\n      right: 16,\n      backgroundColor: !hasStarted || timeLeft === null ? 'primary.main' : timeLeft < 10 ? 'error.main' : 'primary.main',\n      color: 'white',\n      borderRadius: '50%',\n      width: 80,\n      height: 80,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      transition: 'background-color 0.3s ease',\n      boxShadow: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        fontFamily: 'monospace',\n        fontWeight: 'bold'\n      },\n      children: formatTime(timeLeft)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 404,\n    columnNumber: 5\n  }, this);\n  React.useEffect(() => {\n    if (settings.timer) {\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [settings.timer, settings.timeLimit]);\n  const TopBar = () => /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      padding: '16px',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n      onClick: () => navigate('/select'),\n      children: \"DONE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      sx: {\n        fontFamily: '\"Rethink Sans\", Arial, sans-serif',\n        fontWeight: 800\n      },\n      children: [\"CORRECT: \", score.correct, \" INCORRECT: \", score.incorrect]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 439,\n    columnNumber: 5\n  }, this);\n  const handleDrag = e => {\n    const {\n      clientX,\n      clientY\n    } = e;\n    setDragPosition({\n      x: clientX,\n      y: clientY\n    });\n    const newDropZone = calculateDropZone(clientX, clientY);\n    if (newDropZone !== activeDropZone) {\n      setActiveDropZone(newDropZone);\n    }\n  };\n  const handleDragEnd = () => {\n    setDragPosition(null);\n    setActiveDropZone(null);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: '100vh',\n      display: 'flex',\n      flexDirection: 'column',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        padding: '24px',\n        paddingBottom: '120px',\n        paddingTop: '12px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          flex: 1,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: renderPhrase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'fixed',\n        bottom: 0,\n        left: 0,\n        right: 0,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        gap: '32px',\n        padding: '24px',\n        minHeight: '120px',\n        backgroundColor: 'transparent',\n        zIndex: 2\n      },\n      children: shuffledTypes.map(type => /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n        type: type,\n        onClick: () => handleCharacterSelect(type),\n        isCorrect: undefined,\n        isDraggable: true,\n        onDragStart: () => setSelectedMark(null),\n        onDrag: handleDrag,\n        onDragEnd: handleDragEnd,\n        onSelect: handleCharacterSelect\n      }, type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this), settings.timer && /*#__PURE__*/_jsxDEV(TimerDisplay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(GameOverDialog, {\n      open: gameOverOpen,\n      onClose: handleGameOverClose,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 474,\n    columnNumber: 5\n  }, this);\n};\n_s(GameScreen, \"FbMe7wrsQt6BHcUC3dlfYqsSQwI=\", false, function () {\n  return [useNavigate, useGame];\n});\n_c2 = GameScreen;\nexport default GameScreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"GameOverDialog\");\n$RefreshReg$(_c2, \"GameScreen\");","map":{"version":3,"names":["React","Box","Typography","Button","Dialog","DialogContent","DialogActions","useNavigate","useGame","PunctuationCharacter","shuffleArray","CustomButton","jsxDEV","_jsxDEV","samplePhrases","period","text","answer","position","exclamation","question","comma","punctuationTypes","GameOverDialog","open","onClose","score","children","variant","sx","mb","fileName","_jsxFileName","lineNumber","columnNumber","color","correct","incorrect","onClick","_c","GameScreen","_s","navigate","punctuationType","settings","currentPhraseIndex","setCurrentPhraseIndex","useState","currentPhrase","setCurrentPhrase","selectedMark","setSelectedMark","isCorrect","setIsCorrect","setScore","hasStarted","setHasStarted","timeLeft","setTimeLeft","gameOverOpen","setGameOverOpen","shuffledTypes","setShuffledTypes","feedback","setFeedback","timerRef","useRef","dragPosition","setDragPosition","activeDropZone","setActiveDropZone","phraseRef","phrases","useMemo","Object","values","flat","useEffect","startTimer","useCallback","timer","timeLimit","current","setInterval","prev","clearInterval","handleFirstInteraction","getFeedbackMessage","type","correctType","handleCharacterSelect","isCorrectMark","setTimeout","goToNextPhrase","nextIndex","length","handleDrop","e","preventDefault","droppedType","dataTransfer","getData","isCorrectPosition","isCorrectType","handleDragOver","currentTarget","style","backgroundColor","handleDragLeave","handleDragStart","setData","id","calculateDropZone","dragX","dragY","phraseRect","getBoundingClientRect","words","getElementsByClassName","lastWord","lastWordRect","right","i","word","nextWord","wordRect","nextWordRect","gapCenter","left","Math","abs","renderDropZone","isActive","showDropZone","className","onDragEnter","onDragOver","border","onDragLeave","onDrop","display","width","height","borderRadius","transform","marginLeft","justifyContent","alignItems","transition","renderPhrase","split","ref","fontFamily","fontWeight","fontSize","window","innerWidth","lineHeight","textAlign","maxWidth","margin","map","index","Fragment","marginRight","handleGameOverClose","formatTime","seconds","minutes","floor","remainingSeconds","toString","padStart","TimerDisplay","top","boxShadow","TopBar","padding","handleDrag","clientX","clientY","x","y","newDropZone","handleDragEnd","flexDirection","flex","paddingBottom","paddingTop","bottom","gap","minHeight","zIndex","undefined","isDraggable","onDragStart","onDrag","onDragEnd","onSelect","_c2","$RefreshReg$"],"sources":["/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/GameScreen.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Box, Typography, Button, Grid, Dialog, DialogContent, DialogActions } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport PunctuationCharacter from '../components/PunctuationCharacter';\nimport { shuffleArray } from '../utils/shuffle';\nimport { Button as CustomButton } from '../components/Button';\n\ntype Phrase = {\n  text: string;\n  answer: string;\n  position: 'end' | number; // 'end' or index where punctuation should go\n};\n\ntype PhraseCollection = {\n  period: Phrase[];\n  exclamation: Phrase[];\n  question: Phrase[];\n  comma: Phrase[];\n};\n\nconst samplePhrases: PhraseCollection = {\n  period: [\n    { text: \"I love to play in the park\", answer: \"period\", position: 'end' },\n    { text: \"The sun is shining today\", answer: \"period\", position: 'end' },\n  ],\n  exclamation: [\n    { text: \"What a wonderful day\", answer: \"exclamation\", position: 'end' },\n    { text: \"I canâ€™t believe it\", answer: \"exclamation\", position: 'end' },\n  ],\n  question: [\n    { text: \"How are you today\", answer: \"question\", position: 'end' },\n    { text: \"Where did you go\", answer: \"question\", position: 'end' },\n  ],\n  comma: [\n    { text: \"After the movie we went home\", answer: \"comma\", position: 2 }, // After index 2 (after \"movie\")\n    { text: \"Yes I would love to\", answer: \"comma\", position: 0 }, // After index 1 (after \"Yes\")\n  ],\n};\n\ntype PunctuationType = 'period' | 'exclamation' | 'question' | 'comma';\n\nconst punctuationTypes: PunctuationType[] = ['period', 'exclamation', 'question', 'comma'];\n\ninterface FeedbackMessage {\n  text: string;\n  type: 'success' | 'error';\n}\n\ninterface GameOverDialogProps {\n  open: boolean;\n  onClose: () => void;\n  score: { correct: number; incorrect: number };\n}\n\nconst GameOverDialog = ({ open, onClose, score }: GameOverDialogProps) => (\n  <Dialog open={open} onClose={onClose}>\n    <DialogContent>\n      <Typography variant=\"h4\" sx={{ mb: 2 }}>Time's Up!</Typography>\n      <Typography variant=\"h6\" sx={{ color: 'success.main', mb: 1 }}>\n        Correct Answers: {score.correct}\n      </Typography>\n      <Typography variant=\"h6\" sx={{ color: 'error.main', mb: 2 }}>\n        Incorrect Answers: {score.incorrect}\n      </Typography>\n      <Typography variant=\"body1\">\n        {score.correct > score.incorrect \n          ? \"Great job! You're getting really good at this!\" \n          : \"Keep practicing, you're getting better!\"}\n      </Typography>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose}>Play Again</Button>\n    </DialogActions>\n  </Dialog>\n);\n\nconst GameScreen = () => {\n  const navigate = useNavigate();\n  const { punctuationType, settings } = useGame();\n  const [currentPhraseIndex, setCurrentPhraseIndex] = React.useState(0);\n  const [currentPhrase, setCurrentPhrase] = React.useState<Phrase | null>(null);\n  const [selectedMark, setSelectedMark] = React.useState<PunctuationType | null>(null);\n  const [isCorrect, setIsCorrect] = React.useState<boolean | null>(null);\n  const [score, setScore] = React.useState({ correct: 0, incorrect: 0 });\n  const [hasStarted, setHasStarted] = React.useState(false);\n  const [timeLeft, setTimeLeft] = React.useState<number | null>(null);\n  const [gameOverOpen, setGameOverOpen] = React.useState(false);\n  const [shuffledTypes, setShuffledTypes] = React.useState<PunctuationType[]>(['period', 'exclamation', 'question', 'comma']);\n  const [feedback, setFeedback] = React.useState<FeedbackMessage | null>(null);\n  const timerRef = React.useRef<NodeJS.Timeout | null>(null);\n  const [dragPosition, setDragPosition] = React.useState<{ x: number; y: number } | null>(null);\n  const [activeDropZone, setActiveDropZone] = React.useState<number | 'end' | null>(null);\n  const phraseRef = React.useRef<HTMLDivElement>(null);\n\n  const phrases = React.useMemo(() => shuffleArray(Object.values(samplePhrases).flat()), []);\n\n  React.useEffect(() => {\n    setCurrentPhrase(phrases[currentPhraseIndex]);\n  }, [currentPhraseIndex, phrases]);\n\n  const startTimer = React.useCallback(() => {\n    if (!hasStarted && settings.timer) {\n      setHasStarted(true);\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [hasStarted, settings.timer, settings.timeLimit]);\n\n  React.useEffect(() => {\n    if (hasStarted && settings.timer && timeLeft !== null && timeLeft > 0) {\n      timerRef.current = setInterval(() => {\n        setTimeLeft((prev) => {\n          if (prev === null || prev <= 1) {\n            if (timerRef.current) {\n              clearInterval(timerRef.current);\n            }\n            setGameOverOpen(true);\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n\n      return () => {\n        if (timerRef.current) {\n          clearInterval(timerRef.current);\n        }\n      };\n    }\n  }, [hasStarted, settings.timer, timeLeft]);\n\n  React.useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, []);\n\n  const handleFirstInteraction = () => {\n    startTimer();\n  };\n\n  const getFeedbackMessage = (type: string, isCorrect: boolean): FeedbackMessage => {\n    if (isCorrect) {\n      return {\n        text: \"Great job! That's exactly right!\",\n        type: 'success'\n      };\n    }\n\n    const correctType = currentPhrase?.answer;\n    switch (correctType) {\n      case 'period':\n        return {\n          text: \"This sentence needs a period to show it's complete.\",\n          type: 'error'\n        };\n      case 'question':\n        return {\n          text: \"This is a question, so it needs a question mark.\",\n          type: 'error'\n        };\n      case 'exclamation':\n        return {\n          text: \"This sentence shows strong feeling or emotion, so it needs an exclamation mark!\",\n          type: 'error'\n        };\n      case 'comma':\n        return {\n          text: \"A comma is needed here to separate parts of the sentence.\",\n          type: 'error'\n        };\n      default:\n        return {\n          text: \"That's not quite right. Try again!\",\n          type: 'error'\n        };\n    }\n  };\n\n  const handleCharacterSelect = (type: PunctuationType) => {\n    if (!currentPhrase) return;\n\n    // Start timer on first interaction if not started\n    if (!hasStarted) {\n      startTimer();\n    }\n\n    setSelectedMark(type);\n    const isCorrectMark = type === currentPhrase.answer;\n    setIsCorrect(isCorrectMark);\n\n    if (isCorrectMark) {\n      setScore(prev => ({\n        ...prev,\n        correct: prev.correct + 1\n      }));\n    } else {\n      setScore(prev => ({\n        ...prev,\n        incorrect: prev.incorrect + 1\n      }));\n    }\n\n    // Wait for animation then move to next phrase\n    setTimeout(() => {\n      setSelectedMark(null);\n      setIsCorrect(null);\n      goToNextPhrase();\n    }, 1000);\n  };\n\n  const goToNextPhrase = () => {\n    const nextIndex = (currentPhraseIndex + 1) % phrases.length;\n    setCurrentPhraseIndex(nextIndex);\n  };\n\n  const handleDrop = (e: React.DragEvent<HTMLElement>) => {\n    e.preventDefault();\n    \n    const droppedType = e.dataTransfer.getData('application/punctuation') as PunctuationType;\n    \n    if (activeDropZone !== null && droppedType) {\n      const isCorrectPosition = \n        (currentPhrase?.position === 'end' && activeDropZone === 'end') ||\n        (currentPhrase?.position === activeDropZone);\n\n      const isCorrectType = droppedType === currentPhrase?.answer;\n      const isCorrect = isCorrectPosition && isCorrectType;\n\n      // Keep both the drop zone and character visible\n      setSelectedMark(droppedType);\n      setIsCorrect(isCorrect);\n\n      // Update score\n      if (isCorrect) {\n        setScore(prev => ({\n          ...prev,\n          correct: prev.correct + 1\n        }));\n      } else {\n        setScore(prev => ({\n          ...prev,\n          incorrect: prev.incorrect + 1\n        }));\n      }\n\n      // Wait for animation then move to next phrase\n      setTimeout(() => {\n        setSelectedMark(null);\n        setIsCorrect(null);\n        setActiveDropZone(null);\n        goToNextPhrase();\n      }, 1000);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault(); // This is crucial for enabling drop\n    e.currentTarget.style.backgroundColor = 'rgba(0, 0, 0, 0.1)';\n  };\n\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.currentTarget.style.backgroundColor = 'transparent';\n  };\n\n  const handleDragStart = (e: React.DragEvent) => {\n    startTimer();\n    e.dataTransfer.setData('text/plain', e.currentTarget.id);\n  };\n\n  const calculateDropZone = (dragX: number, dragY: number) => {\n    if (!phraseRef.current) return null;\n\n    const phraseRect = phraseRef.current.getBoundingClientRect();\n    const words = phraseRef.current.getElementsByClassName('word');\n    \n    // Check if we're near the end of the phrase\n    const lastWord = words[words.length - 1];\n    const lastWordRect = lastWord.getBoundingClientRect();\n    \n    if (dragX > lastWordRect.right - 20) {\n      return 'end';\n    }\n\n    // Check positions between words\n    for (let i = 0; i < words.length - 1; i++) {\n      const word = words[i];\n      const nextWord = words[i + 1];\n      const wordRect = word.getBoundingClientRect();\n      const nextWordRect = nextWord.getBoundingClientRect();\n      const gapCenter = (wordRect.right + nextWordRect.left) / 2;\n\n      if (Math.abs(dragX - gapCenter) < 40) {\n        return i;\n      }\n    }\n\n    return null;\n  };\n\n  const renderDropZone = (position: number | 'end') => {\n    const isActive = activeDropZone === position;\n    const showDropZone = isActive || (selectedMark && activeDropZone === position);\n    \n    if (!showDropZone) return null;\n\n    return (\n      <span\n        className=\"dropzone\"\n        data-dropzone=\"true\"\n        onDragEnter={(e) => {\n          e.preventDefault();\n          e.currentTarget.style.backgroundColor = 'rgba(0, 0, 0, 0.1)';\n        }}\n        onDragOver={(e) => {\n          e.preventDefault();\n          e.currentTarget.style.border = '6px dashed #666';\n        }}\n        onDragLeave={(e) => {\n          e.preventDefault();\n          e.currentTarget.style.border = '6px dashed #ccc';\n          e.currentTarget.style.backgroundColor = 'transparent';\n        }}\n        onDrop={handleDrop}\n        style={{\n          display: 'inline-flex',\n          width: '140px',\n          height: '140px',\n          border: '6px dashed #ccc',\n          borderRadius: '20px',\n          position: position === 'end' ? 'relative' : 'absolute',\n          transform: position === 'end' ? 'none' : 'translateX(-150px)',\n          marginLeft: position === 'end' ? '16px' : '0',\n          justifyContent: 'center',\n          alignItems: 'center',\n          transition: 'all 0.2s ease',\n        }}\n      >\n        {selectedMark && activeDropZone === position && (\n          <PunctuationCharacter\n            type={selectedMark}\n            isCorrect={isCorrect}\n            onClick={() => {}}\n          />\n        )}\n      </span>\n    );\n  };\n\n  const renderPhrase = () => {\n    if (!currentPhrase) return null;\n\n    const words = currentPhrase.text.split(' ');\n    \n    return (\n      <div ref={phraseRef}>\n        <div style={{\n          fontFamily: '\"Bookman Old Style Regular\", \"Bookman\", \"URW Bookman L\", serif',\n          fontWeight: 'normal',\n          fontSize: window.innerWidth < 600 ? '80px' : '120px',\n          lineHeight: '1.1',\n          display: 'inline-block',\n          textAlign: 'left',\n          maxWidth: '90%',\n          margin: '0 auto',\n        }}>\n          {words.map((word, index) => (\n            <React.Fragment key={index}>\n              <span \n                className=\"word\"\n                style={{ \n                  display: 'inline-block',\n                  transition: 'margin 0.3s ease',\n                  marginRight: (activeDropZone === index || (selectedMark && activeDropZone === index)) ? '140px' : '16px'\n                }}\n              >\n                {word}\n              </span>\n              {renderDropZone(index)}\n            </React.Fragment>\n          ))}\n          {renderDropZone('end')}\n        </div>\n      </div>\n    );\n  };\n\n  const handleGameOverClose = () => {\n    setGameOverOpen(false);\n    navigate('/select');\n  };\n\n  const formatTime = (seconds: number | null): string => {\n    if (seconds === null) return \"0:00\";\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const TimerDisplay = () => (\n    <Box sx={{ \n      position: 'absolute',\n      top: 16,\n      right: 16,\n      backgroundColor: (!hasStarted || timeLeft === null) ? 'primary.main' :\n                      timeLeft < 10 ? 'error.main' : 'primary.main',\n      color: 'white',\n      borderRadius: '50%',\n      width: 80,\n      height: 80,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      transition: 'background-color 0.3s ease',\n      boxShadow: 2\n    }}>\n      <Typography \n        variant=\"h6\" \n        sx={{ \n          fontFamily: 'monospace',\n          fontWeight: 'bold'\n        }}\n      >\n        {formatTime(timeLeft)}\n      </Typography>\n    </Box>\n  );\n\n  React.useEffect(() => {\n    if (settings.timer) {\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [settings.timer, settings.timeLimit]);\n\n  const TopBar = () => (\n    <Box sx={{ \n      display: 'flex', \n      justifyContent: 'space-between', \n      alignItems: 'center',\n      padding: '16px',\n      width: '100%'\n    }}>\n      <CustomButton onClick={() => navigate('/select')}>\n        DONE\n      </CustomButton>\n      <Typography sx={{ \n        fontFamily: '\"Rethink Sans\", Arial, sans-serif',\n        fontWeight: 800\n      }}>\n        CORRECT: {score.correct} INCORRECT: {score.incorrect}\n      </Typography>\n    </Box>\n  );\n\n  const handleDrag = (e: React.DragEvent) => {\n    const { clientX, clientY } = e;\n    setDragPosition({ x: clientX, y: clientY });\n    \n    const newDropZone = calculateDropZone(clientX, clientY);\n    if (newDropZone !== activeDropZone) {\n      setActiveDropZone(newDropZone);\n    }\n  };\n\n  const handleDragEnd = () => {\n    setDragPosition(null);\n    setActiveDropZone(null);\n  };\n\n  return (\n    <Box sx={{ \n      height: '100vh',\n      display: 'flex',\n      flexDirection: 'column',\n      position: 'relative'\n    }}>\n      <TopBar />\n      \n      <Box sx={{ \n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        padding: '24px',\n        paddingBottom: '120px',\n        paddingTop: '12px',\n      }}>\n        <Box sx={{ \n          flex: 1,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }}>\n          {renderPhrase()}\n        </Box>\n      </Box>\n\n      <Box sx={{ \n        position: 'fixed',\n        bottom: 0,\n        left: 0,\n        right: 0,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        gap: '32px',\n        padding: '24px',\n        minHeight: '120px',\n        backgroundColor: 'transparent',\n        zIndex: 2\n      }}>\n        {shuffledTypes.map((type) => (\n          <PunctuationCharacter\n            key={type}\n            type={type}\n            onClick={() => handleCharacterSelect(type)}\n            isCorrect={undefined}\n            isDraggable={true}\n            onDragStart={() => setSelectedMark(null)}\n            onDrag={handleDrag}\n            onDragEnd={handleDragEnd}\n            onSelect={handleCharacterSelect}\n          />\n        ))}\n      </Box>\n\n      {settings.timer && <TimerDisplay />}\n      <GameOverDialog \n        open={gameOverOpen} \n        onClose={handleGameOverClose}\n        score={score}\n      />\n    </Box>\n  );\n};\n\nexport default GameScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}