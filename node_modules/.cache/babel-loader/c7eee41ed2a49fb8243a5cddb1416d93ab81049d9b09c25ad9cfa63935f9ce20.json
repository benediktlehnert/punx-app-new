{"ast":null,"code":"var _jsxFileName = \"/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/GameScreen.tsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport PunctuationCharacter from '../components/PunctuationCharacter';\nimport { shuffleArray } from '../utils/shuffle';\nimport { Button as CustomButton } from '../components/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst samplePhrases = {\n  period: [{\n    text: \"I love to play in the park\",\n    answer: \"period\",\n    position: 'end'\n  }, {\n    text: \"The sun is shining today\",\n    answer: \"period\",\n    position: 'end'\n  }],\n  exclamation: [{\n    text: \"What a wonderful day\",\n    answer: \"exclamation\",\n    position: 'end'\n  }, {\n    text: \"I canâ€™t believe it\",\n    answer: \"exclamation\",\n    position: 'end'\n  }],\n  question: [{\n    text: \"How are you today\",\n    answer: \"question\",\n    position: 'end'\n  }, {\n    text: \"Where did you go\",\n    answer: \"question\",\n    position: 'end'\n  }],\n  comma: [{\n    text: \"After the movie we went home\",\n    answer: \"comma\",\n    position: 2\n  },\n  // After index 2 (after \"movie\")\n  {\n    text: \"Yes I would love to\",\n    answer: \"comma\",\n    position: 0\n  } // After index 1 (after \"Yes\")\n  ]\n};\n\n// Add this type to help with calculations\n\n// Add proper type definitions\n\nconst GameScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    settings\n  } = useGame();\n  const [currentPhraseIndex, setCurrentPhraseIndex] = React.useState(0);\n  const [currentPhrase, setCurrentPhrase] = React.useState(null);\n  const [selectedMark, setSelectedMark] = React.useState(null);\n  const [isCorrect, setIsCorrect] = React.useState(null);\n  const [score, setScore] = React.useState({\n    correct: 0,\n    incorrect: 0\n  });\n  const [hasStarted, setHasStarted] = React.useState(false);\n  const [timeLeft, setTimeLeft] = React.useState(null);\n  const [gameOverOpen, setGameOverOpen] = React.useState(false);\n  const [activeDropZone, setActiveDropZone] = React.useState(null);\n  const [droppedPosition, setDroppedPosition] = React.useState(null);\n  const phraseRef = React.useRef(null);\n  const phrases = React.useMemo(() => shuffleArray(Object.values(samplePhrases).flat()), []);\n  const [forceLineBreak, setForceLineBreak] = React.useState(false);\n  const [lineBreaks, setLineBreaks] = React.useState([]);\n  const DROP_ZONE_WIDTH = 156; // 140px + 16px margin\n\n  // Enhanced calculation that checks all possible drop zone positions\n  const calculateLineBreaks = React.useCallback(() => {\n    if (!phraseRef.current || !currentPhrase) return [];\n    const words = currentPhrase.text.split(' ');\n    const containerWidth = phraseRef.current.offsetWidth - 160;\n    const wordSpacing = 16;\n\n    // Create temporary div for measurements\n    const tempDiv = document.createElement('div');\n    tempDiv.style.visibility = 'hidden';\n    tempDiv.style.position = 'absolute';\n    tempDiv.style.fontSize = window.innerWidth < 1024 ? '100px' : '200px';\n    tempDiv.style.fontFamily = '\"Bookman Old Style Regular\", \"Bookman\", \"URW Bookman L\", serif';\n    tempDiv.style.whiteSpace = 'nowrap';\n    document.body.appendChild(tempDiv);\n\n    // Measure total width including the drop zone\n    tempDiv.textContent = words.join(' ');\n    const totalWidth = tempDiv.offsetWidth + DROP_ZONE_WIDTH + wordSpacing;\n\n    // If everything fits on one line, return empty breaks\n    if (totalWidth <= containerWidth) {\n      document.body.removeChild(tempDiv);\n      return [];\n    }\n\n    // If we need line breaks, calculate them precisely\n    const wordWidths = words.map(word => {\n      tempDiv.textContent = word;\n      return tempDiv.offsetWidth;\n    });\n    document.body.removeChild(tempDiv);\n    const breaks = [];\n    let currentLineWidth = 0;\n    for (let i = 0; i < words.length; i++) {\n      const isLastWord = i === words.length - 1;\n      const currentWordWidth = wordWidths[i];\n\n      // Add spacing if not first word on line\n      if (currentLineWidth > 0) {\n        currentLineWidth += wordSpacing;\n      }\n      currentLineWidth += currentWordWidth;\n\n      // For the last word, check if we need space for the drop zone\n      if (isLastWord) {\n        const needsBreakForDropZone = currentLineWidth + DROP_ZONE_WIDTH > containerWidth;\n        if (needsBreakForDropZone) {\n          breaks.push({\n            beforeWord: i,\n            dropZoneWidth: DROP_ZONE_WIDTH\n          });\n        }\n        break;\n      }\n\n      // For other words, check if next word fits\n      if (i < words.length - 1) {\n        const nextWordWidth = wordWidths[i + 1];\n        if (currentLineWidth + wordSpacing + nextWordWidth > containerWidth) {\n          breaks.push({\n            beforeWord: i + 1,\n            dropZoneWidth: 0\n          });\n          currentLineWidth = 0;\n        }\n      }\n    }\n    return breaks;\n  }, [currentPhrase]);\n\n  // Update effect to use new calculation\n  React.useEffect(() => {\n    const updateLineBreaks = () => {\n      setLineBreaks(calculateLineBreaks());\n    };\n    updateLineBreaks();\n    window.addEventListener('resize', updateLineBreaks);\n    return () => window.removeEventListener('resize', updateLineBreaks);\n  }, [calculateLineBreaks]);\n  React.useEffect(() => {\n    setCurrentPhrase(phrases[currentPhraseIndex]);\n  }, [currentPhraseIndex, phrases]);\n  const FEEDBACK_DURATION = 1500;\n\n  // Update handleDrop to match the type\n  const handleDrop = React.useCallback(e => {\n    e.preventDefault();\n    const droppedType = e.dataTransfer.getData('application/punctuation');\n    if (activeDropZone !== null && droppedType) {\n      const isCorrectPosition = (currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.position) === 'end' && activeDropZone === 'end' || (currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.position) === activeDropZone;\n      const isCorrectType = droppedType === (currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.answer);\n      const isCorrect = isCorrectPosition && isCorrectType;\n      setDroppedPosition(activeDropZone);\n      setSelectedMark(droppedType);\n      setIsCorrect(isCorrect);\n      if (isCorrect) {\n        setScore(prev => ({\n          ...prev,\n          correct: prev.correct + 1\n        }));\n      } else {\n        setScore(prev => ({\n          ...prev,\n          incorrect: prev.incorrect + 1\n        }));\n      }\n      setTimeout(() => {\n        setDroppedPosition(null);\n        setSelectedMark(null);\n        setIsCorrect(null);\n        setActiveDropZone(null);\n        goToNextPhrase();\n      }, FEEDBACK_DURATION);\n    }\n  }, [activeDropZone, currentPhrase]);\n  const calculateDropZone = (dragX, dragY) => {\n    if (!phraseRef.current) return null;\n    const words = phraseRef.current.getElementsByClassName('word');\n    const phraseRect = phraseRef.current.getBoundingClientRect();\n\n    // If the drag is outside the phrase area vertically, return null\n    if (dragY < phraseRect.top - 50 || dragY > phraseRect.bottom + 50) {\n      return null;\n    }\n    const hysteresis = activeDropZone !== null ? 30 : 0;\n    let closestDistance = Infinity;\n    let closestZone = null;\n\n    // For short phrases, prioritize the end position if near the last word\n    const lastWord = words[words.length - 1];\n    const lastWordRect = lastWord.getBoundingClientRect();\n\n    // Check end position first\n    if (dragX > lastWordRect.right - 20) {\n      const distance = Math.abs(dragX - (lastWordRect.right + 70));\n      const threshold = activeDropZone === 'end' ? 50 + hysteresis : 50;\n      if (distance < threshold) {\n        return 'end';\n      }\n    }\n\n    // Then check middle positions\n    for (let i = 0; i < words.length - 1; i++) {\n      const word = words[i];\n      const nextWord = words[i + 1];\n      const wordRect = word.getBoundingClientRect();\n      const nextWordRect = nextWord.getBoundingClientRect();\n\n      // Only check gaps on the same line\n      if (Math.abs(wordRect.top - nextWordRect.top) < 10) {\n        const gapCenter = (wordRect.right + nextWordRect.left) / 2;\n        const distance = Math.abs(dragX - gapCenter);\n        const threshold = activeDropZone === i ? 40 + hysteresis : 40;\n        if (distance < threshold && distance < closestDistance) {\n          closestDistance = distance;\n          closestZone = i;\n        }\n      }\n    }\n    return closestZone;\n  };\n\n  // Add this at the component level\n  const DROP_ZONE_APPEAR_DELAY = 0; // Remove any artificial delay\n  const DRAG_THROTTLE = 16; // About 60fps, adjust if needed\n\n  // Optimize the drag handler\n  const handleDrag = React.useCallback(e => {\n    e.preventDefault();\n    const {\n      clientX,\n      clientY\n    } = e;\n    const newDropZone = calculateDropZone(clientX, clientY);\n\n    // Update immediately without any delay or throttling\n    if (newDropZone !== activeDropZone) {\n      setActiveDropZone(newDropZone);\n    }\n  }, [activeDropZone]);\n\n  // Add this at the component level\n  const lastDropZoneUpdate = React.useRef(0);\n\n  // Update the DropZone component with proper typing\n  const DropZone = /*#__PURE__*/React.memo(({\n    position,\n    isActive,\n    onDrop,\n    children\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropzone\",\n    \"data-dropzone\": \"true\",\n    onDragEnter: e => {\n      e.preventDefault();\n      e.currentTarget.style.border = '6px dashed #666';\n    },\n    onDragOver: e => {\n      e.preventDefault();\n      e.currentTarget.style.border = '6px dashed #666';\n    },\n    onDragLeave: e => {\n      e.preventDefault();\n      e.currentTarget.style.border = '6px dashed #ccc';\n    },\n    onDrop: onDrop,\n    style: {\n      width: '140px',\n      height: '140px',\n      border: '6px dashed #ccc',\n      borderRadius: '20px',\n      display: 'inline-flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginLeft: '16px',\n      opacity: 1,\n      transform: 'translateZ(0)',\n      willChange: 'transform, border'\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 5\n  }, this));\n  const renderPhrase = () => {\n    if (!currentPhrase) return null;\n    const words = currentPhrase.text.split(' ');\n    const lastWordIndex = words.length - 1;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: phraseRef,\n      style: {\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        padding: '40px 80px',\n        minHeight: '300px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '16px',\n          alignItems: 'center',\n          maxWidth: '100%'\n        },\n        children: [words.map((word, index) => {\n          const isLastWord = index === lastWordIndex;\n          const shouldBreak = lineBreaks.some(b => b.beforeWord === index);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'inline-flex',\n              alignItems: 'center',\n              position: 'relative',\n              width: shouldBreak ? '100%' : 'auto'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"word\",\n              style: {\n                fontFamily: '\"Bookman Old Style Regular\", \"Bookman\", \"URW Bookman L\", serif',\n                fontSize: window.innerWidth < 1024 ? '80px' : '100px',\n                lineHeight: '1.1',\n                whiteSpace: 'nowrap',\n                userSelect: 'none'\n              },\n              children: word\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 17\n            }, this), (activeDropZone === index || droppedPosition === index) && /*#__PURE__*/_jsxDEV(DropZone, {\n              position: index,\n              isActive: activeDropZone === index,\n              onDrop: handleDrop,\n              children: selectedMark && droppedPosition === index && /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n                type: selectedMark,\n                isCorrect: isCorrect,\n                onClick: () => {}\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 15\n          }, this);\n        }), (activeDropZone === 'end' || droppedPosition === 'end') && /*#__PURE__*/_jsxDEV(DropZone, {\n          position: \"end\",\n          isActive: activeDropZone === 'end',\n          onDrop: handleDrop,\n          children: selectedMark && droppedPosition === 'end' && /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n            type: selectedMark,\n            isCorrect: isCorrect,\n            onClick: () => {}\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this);\n  };\n  const goToNextPhrase = () => {\n    const nextIndex = (currentPhraseIndex + 1) % phrases.length;\n    setCurrentPhraseIndex(nextIndex);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        padding: '16px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n        onClick: () => navigate('/select'),\n        children: \"DONE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontFamily: '\"Rethink Sans\", Arial, sans-serif',\n          fontWeight: 800\n        },\n        children: [\"CORRECT: \", score.correct, \" INCORRECT: \", score.incorrect]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this), renderPhrase(), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        bottom: 0,\n        left: 0,\n        right: 0,\n        display: 'flex',\n        justifyContent: 'center',\n        gap: '32px',\n        padding: '24px',\n        minHeight: '120px'\n      },\n      children: ['period', 'exclamation', 'question', 'comma'].map(type => /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n        type: type,\n        onClick: () => {},\n        isCorrect: undefined,\n        isDraggable: true,\n        onDrag: handleDrag,\n        onDragEnd: () => setActiveDropZone(null)\n      }, type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 414,\n    columnNumber: 5\n  }, this);\n};\n_s(GameScreen, \"tLXYRv2nots+OYR4a5WdZfibtr4=\", false, function () {\n  return [useNavigate, useGame];\n});\n_c = GameScreen;\nexport default GameScreen;\nvar _c;\n$RefreshReg$(_c, \"GameScreen\");","map":{"version":3,"names":["React","useNavigate","useGame","PunctuationCharacter","shuffleArray","Button","CustomButton","jsxDEV","_jsxDEV","samplePhrases","period","text","answer","position","exclamation","question","comma","GameScreen","_s","navigate","settings","currentPhraseIndex","setCurrentPhraseIndex","useState","currentPhrase","setCurrentPhrase","selectedMark","setSelectedMark","isCorrect","setIsCorrect","score","setScore","correct","incorrect","hasStarted","setHasStarted","timeLeft","setTimeLeft","gameOverOpen","setGameOverOpen","activeDropZone","setActiveDropZone","droppedPosition","setDroppedPosition","phraseRef","useRef","phrases","useMemo","Object","values","flat","forceLineBreak","setForceLineBreak","lineBreaks","setLineBreaks","DROP_ZONE_WIDTH","calculateLineBreaks","useCallback","current","words","split","containerWidth","offsetWidth","wordSpacing","tempDiv","document","createElement","style","visibility","fontSize","window","innerWidth","fontFamily","whiteSpace","body","appendChild","textContent","join","totalWidth","removeChild","wordWidths","map","word","breaks","currentLineWidth","i","length","isLastWord","currentWordWidth","needsBreakForDropZone","push","beforeWord","dropZoneWidth","nextWordWidth","useEffect","updateLineBreaks","addEventListener","removeEventListener","FEEDBACK_DURATION","handleDrop","e","preventDefault","droppedType","dataTransfer","getData","isCorrectPosition","isCorrectType","prev","setTimeout","goToNextPhrase","calculateDropZone","dragX","dragY","getElementsByClassName","phraseRect","getBoundingClientRect","top","bottom","hysteresis","closestDistance","Infinity","closestZone","lastWord","lastWordRect","right","distance","Math","abs","threshold","nextWord","wordRect","nextWordRect","gapCenter","left","DROP_ZONE_APPEAR_DELAY","DRAG_THROTTLE","handleDrag","clientX","clientY","newDropZone","lastDropZoneUpdate","DropZone","memo","isActive","onDrop","children","className","onDragEnter","currentTarget","border","onDragOver","onDragLeave","width","height","borderRadius","display","justifyContent","alignItems","marginLeft","opacity","transform","willChange","fileName","_jsxFileName","lineNumber","columnNumber","renderPhrase","lastWordIndex","ref","padding","minHeight","flexWrap","gap","maxWidth","index","shouldBreak","some","b","lineHeight","userSelect","type","onClick","nextIndex","flexDirection","fontWeight","undefined","isDraggable","onDrag","onDragEnd","_c","$RefreshReg$"],"sources":["/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/GameScreen.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport PunctuationCharacter from '../components/PunctuationCharacter';\nimport { shuffleArray } from '../utils/shuffle';\nimport { Button as CustomButton } from '../components/Button';\n\ntype Phrase = {\n  text: string;\n  answer: string;\n  position: 'end' | number; // 'end' or index where punctuation should go\n};\n\ntype PhraseCollection = {\n  period: Phrase[];\n  exclamation: Phrase[];\n  question: Phrase[];\n  comma: Phrase[];\n};\n\nconst samplePhrases: PhraseCollection = {\n  period: [\n    { text: \"I love to play in the park\", answer: \"period\", position: 'end' },\n    { text: \"The sun is shining today\", answer: \"period\", position: 'end' },\n  ],\n  exclamation: [\n    { text: \"What a wonderful day\", answer: \"exclamation\", position: 'end' },\n    { text: \"I canâ€™t believe it\", answer: \"exclamation\", position: 'end' },\n  ],\n  question: [\n    { text: \"How are you today\", answer: \"question\", position: 'end' },\n    { text: \"Where did you go\", answer: \"question\", position: 'end' },\n  ],\n  comma: [\n    { text: \"After the movie we went home\", answer: \"comma\", position: 2 }, // After index 2 (after \"movie\")\n    { text: \"Yes I would love to\", answer: \"comma\", position: 0 }, // After index 1 (after \"Yes\")\n  ],\n};\n\ntype PunctuationType = 'period' | 'exclamation' | 'question' | 'comma';\n\n// Add this type to help with calculations\ntype LineBreakInfo = {\n  beforeWord: number | null;  // Index of word to break before\n  dropZoneWidth: number;      // Width needed for the drop zone\n};\n\n// Add proper type definitions\ninterface DropZoneProps {\n  position: number | 'end';\n  isActive: boolean;\n  onDrop: (e: React.DragEvent<HTMLDivElement>) => void;\n  children?: React.ReactNode;\n}\n\nconst GameScreen = () => {\n  const navigate = useNavigate();\n  const { settings } = useGame();\n  const [currentPhraseIndex, setCurrentPhraseIndex] = React.useState(0);\n  const [currentPhrase, setCurrentPhrase] = React.useState<Phrase | null>(null);\n  const [selectedMark, setSelectedMark] = React.useState<PunctuationType | null>(null);\n  const [isCorrect, setIsCorrect] = React.useState<boolean | null>(null);\n  const [score, setScore] = React.useState({ correct: 0, incorrect: 0 });\n  const [hasStarted, setHasStarted] = React.useState(false);\n  const [timeLeft, setTimeLeft] = React.useState<number | null>(null);\n  const [gameOverOpen, setGameOverOpen] = React.useState(false);\n  const [activeDropZone, setActiveDropZone] = React.useState<number | 'end' | null>(null);\n  const [droppedPosition, setDroppedPosition] = React.useState<number | 'end' | null>(null);\n  \n  const phraseRef = React.useRef<HTMLDivElement>(null);\n  const phrases = React.useMemo(() => shuffleArray(Object.values(samplePhrases).flat()), []);\n\n  const [forceLineBreak, setForceLineBreak] = React.useState(false);\n  const [lineBreaks, setLineBreaks] = React.useState<LineBreakInfo[]>([]);\n\n  const DROP_ZONE_WIDTH = 156; // 140px + 16px margin\n\n  // Enhanced calculation that checks all possible drop zone positions\n  const calculateLineBreaks = React.useCallback(() => {\n    if (!phraseRef.current || !currentPhrase) return [];\n\n    const words = currentPhrase.text.split(' ');\n    const containerWidth = phraseRef.current.offsetWidth - 160;\n    const wordSpacing = 16;\n    \n    // Create temporary div for measurements\n    const tempDiv = document.createElement('div');\n    tempDiv.style.visibility = 'hidden';\n    tempDiv.style.position = 'absolute';\n    tempDiv.style.fontSize = window.innerWidth < 1024 ? '100px' : '200px';\n    tempDiv.style.fontFamily = '\"Bookman Old Style Regular\", \"Bookman\", \"URW Bookman L\", serif';\n    tempDiv.style.whiteSpace = 'nowrap';\n    document.body.appendChild(tempDiv);\n\n    // Measure total width including the drop zone\n    tempDiv.textContent = words.join(' ');\n    const totalWidth = tempDiv.offsetWidth + DROP_ZONE_WIDTH + wordSpacing;\n\n    // If everything fits on one line, return empty breaks\n    if (totalWidth <= containerWidth) {\n      document.body.removeChild(tempDiv);\n      return [];\n    }\n\n    // If we need line breaks, calculate them precisely\n    const wordWidths = words.map(word => {\n      tempDiv.textContent = word;\n      return tempDiv.offsetWidth;\n    });\n\n    document.body.removeChild(tempDiv);\n\n    const breaks: LineBreakInfo[] = [];\n    let currentLineWidth = 0;\n\n    for (let i = 0; i < words.length; i++) {\n      const isLastWord = i === words.length - 1;\n      const currentWordWidth = wordWidths[i];\n\n      // Add spacing if not first word on line\n      if (currentLineWidth > 0) {\n        currentLineWidth += wordSpacing;\n      }\n\n      currentLineWidth += currentWordWidth;\n\n      // For the last word, check if we need space for the drop zone\n      if (isLastWord) {\n        const needsBreakForDropZone = currentLineWidth + DROP_ZONE_WIDTH > containerWidth;\n        if (needsBreakForDropZone) {\n          breaks.push({\n            beforeWord: i,\n            dropZoneWidth: DROP_ZONE_WIDTH\n          });\n        }\n        break;\n      }\n\n      // For other words, check if next word fits\n      if (i < words.length - 1) {\n        const nextWordWidth = wordWidths[i + 1];\n        if (currentLineWidth + wordSpacing + nextWordWidth > containerWidth) {\n          breaks.push({\n            beforeWord: i + 1,\n            dropZoneWidth: 0\n          });\n          currentLineWidth = 0;\n        }\n      }\n    }\n\n    return breaks;\n  }, [currentPhrase]);\n\n  // Update effect to use new calculation\n  React.useEffect(() => {\n    const updateLineBreaks = () => {\n      setLineBreaks(calculateLineBreaks());\n    };\n\n    updateLineBreaks();\n    window.addEventListener('resize', updateLineBreaks);\n    return () => window.removeEventListener('resize', updateLineBreaks);\n  }, [calculateLineBreaks]);\n\n  React.useEffect(() => {\n    setCurrentPhrase(phrases[currentPhraseIndex]);\n  }, [currentPhraseIndex, phrases]);\n\n  const FEEDBACK_DURATION = 1500;\n\n  // Update handleDrop to match the type\n  const handleDrop = React.useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    \n    const droppedType = e.dataTransfer.getData('application/punctuation') as PunctuationType;\n    \n    if (activeDropZone !== null && droppedType) {\n      const isCorrectPosition = \n        (currentPhrase?.position === 'end' && activeDropZone === 'end') ||\n        (currentPhrase?.position === activeDropZone);\n      const isCorrectType = droppedType === currentPhrase?.answer;\n      const isCorrect = isCorrectPosition && isCorrectType;\n\n      setDroppedPosition(activeDropZone);\n      setSelectedMark(droppedType);\n      setIsCorrect(isCorrect);\n\n      if (isCorrect) {\n        setScore(prev => ({ ...prev, correct: prev.correct + 1 }));\n      } else {\n        setScore(prev => ({ ...prev, incorrect: prev.incorrect + 1 }));\n      }\n\n      setTimeout(() => {\n        setDroppedPosition(null);\n        setSelectedMark(null);\n        setIsCorrect(null);\n        setActiveDropZone(null);\n        goToNextPhrase();\n      }, FEEDBACK_DURATION);\n    }\n  }, [activeDropZone, currentPhrase]);\n\n  const calculateDropZone = (dragX: number, dragY: number) => {\n    if (!phraseRef.current) return null;\n\n    const words = phraseRef.current.getElementsByClassName('word');\n    const phraseRect = phraseRef.current.getBoundingClientRect();\n    \n    // If the drag is outside the phrase area vertically, return null\n    if (dragY < phraseRect.top - 50 || dragY > phraseRect.bottom + 50) {\n      return null;\n    }\n\n    const hysteresis = activeDropZone !== null ? 30 : 0;\n    let closestDistance = Infinity;\n    let closestZone: number | 'end' | null = null;\n\n    // For short phrases, prioritize the end position if near the last word\n    const lastWord = words[words.length - 1];\n    const lastWordRect = lastWord.getBoundingClientRect();\n    \n    // Check end position first\n    if (dragX > lastWordRect.right - 20) {\n      const distance = Math.abs(dragX - (lastWordRect.right + 70));\n      const threshold = activeDropZone === 'end' ? 50 + hysteresis : 50;\n      \n      if (distance < threshold) {\n        return 'end';\n      }\n    }\n\n    // Then check middle positions\n    for (let i = 0; i < words.length - 1; i++) {\n      const word = words[i];\n      const nextWord = words[i + 1];\n      const wordRect = word.getBoundingClientRect();\n      const nextWordRect = nextWord.getBoundingClientRect();\n      \n      // Only check gaps on the same line\n      if (Math.abs(wordRect.top - nextWordRect.top) < 10) {\n        const gapCenter = (wordRect.right + nextWordRect.left) / 2;\n        const distance = Math.abs(dragX - gapCenter);\n        \n        const threshold = activeDropZone === i ? 40 + hysteresis : 40;\n        \n        if (distance < threshold && distance < closestDistance) {\n          closestDistance = distance;\n          closestZone = i;\n        }\n      }\n    }\n\n    return closestZone;\n  };\n\n  // Add this at the component level\n  const DROP_ZONE_APPEAR_DELAY = 0; // Remove any artificial delay\n  const DRAG_THROTTLE = 16; // About 60fps, adjust if needed\n\n  // Optimize the drag handler\n  const handleDrag = React.useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    const { clientX, clientY } = e;\n    const newDropZone = calculateDropZone(clientX, clientY);\n    \n    // Update immediately without any delay or throttling\n    if (newDropZone !== activeDropZone) {\n      setActiveDropZone(newDropZone);\n    }\n  }, [activeDropZone]);\n\n  // Add this at the component level\n  const lastDropZoneUpdate = React.useRef<number>(0);\n\n  // Update the DropZone component with proper typing\n  const DropZone = React.memo(({ \n    position, \n    isActive, \n    onDrop, \n    children \n  }: DropZoneProps) => (\n    <div\n      className=\"dropzone\"\n      data-dropzone=\"true\"\n      onDragEnter={(e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.currentTarget.style.border = '6px dashed #666';\n      }}\n      onDragOver={(e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.currentTarget.style.border = '6px dashed #666';\n      }}\n      onDragLeave={(e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.currentTarget.style.border = '6px dashed #ccc';\n      }}\n      onDrop={onDrop}\n      style={{\n        width: '140px',\n        height: '140px',\n        border: '6px dashed #ccc',\n        borderRadius: '20px',\n        display: 'inline-flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginLeft: '16px',\n        opacity: 1,\n        transform: 'translateZ(0)',\n        willChange: 'transform, border',\n      }}\n    >\n      {children}\n    </div>\n  ));\n\n  const renderPhrase = () => {\n    if (!currentPhrase) return null;\n\n    const words = currentPhrase.text.split(' ');\n    const lastWordIndex = words.length - 1;\n    \n    return (\n      <div \n        ref={phraseRef}\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'center',\n          padding: '40px 80px',\n          minHeight: '300px',\n        }}\n      >\n        <div style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '16px',\n          alignItems: 'center',\n          maxWidth: '100%',\n        }}>\n          {words.map((word, index) => {\n            const isLastWord = index === lastWordIndex;\n            const shouldBreak = lineBreaks.some(b => b.beforeWord === index);\n            \n            return (\n              <div\n                key={index}\n                style={{\n                  display: 'inline-flex',\n                  alignItems: 'center',\n                  position: 'relative',\n                  width: shouldBreak ? '100%' : 'auto',\n                }}\n              >\n                <span \n                  className=\"word\"\n                  style={{\n                    fontFamily: '\"Bookman Old Style Regular\", \"Bookman\", \"URW Bookman L\", serif',\n                    fontSize: window.innerWidth < 1024 ? '80px' : '100px',\n                    lineHeight: '1.1',\n                    whiteSpace: 'nowrap',\n                    userSelect: 'none',\n                  }}\n                >\n                  {word}\n                </span>\n                {(activeDropZone === index || droppedPosition === index) && (\n                  <DropZone\n                    position={index}\n                    isActive={activeDropZone === index}\n                    onDrop={handleDrop}\n                  >\n                    {selectedMark && droppedPosition === index && (\n                      <PunctuationCharacter\n                        type={selectedMark}\n                        isCorrect={isCorrect}\n                        onClick={() => {}}\n                      />\n                    )}\n                  </DropZone>\n                )}\n              </div>\n            );\n          })}\n          {(activeDropZone === 'end' || droppedPosition === 'end') && (\n            <DropZone\n              position=\"end\"\n              isActive={activeDropZone === 'end'}\n              onDrop={handleDrop}\n            >\n              {selectedMark && droppedPosition === 'end' && (\n                <PunctuationCharacter\n                  type={selectedMark}\n                  isCorrect={isCorrect}\n                  onClick={() => {}}\n                />\n              )}\n            </DropZone>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const goToNextPhrase = () => {\n    const nextIndex = (currentPhraseIndex + 1) % phrases.length;\n    setCurrentPhraseIndex(nextIndex);\n  };\n\n  return (\n    <div style={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'space-between', \n        alignItems: 'center',\n        padding: '16px'\n      }}>\n        <CustomButton onClick={() => navigate('/select')}>\n          DONE\n        </CustomButton>\n        <div style={{ \n          fontFamily: '\"Rethink Sans\", Arial, sans-serif',\n          fontWeight: 800\n        }}>\n          CORRECT: {score.correct} INCORRECT: {score.incorrect}\n        </div>\n      </div>\n\n      {renderPhrase()}\n\n      <div style={{\n        position: 'fixed',\n        bottom: 0,\n        left: 0,\n        right: 0,\n        display: 'flex',\n        justifyContent: 'center',\n        gap: '32px',\n        padding: '24px',\n        minHeight: '120px'\n      }}>\n        {['period', 'exclamation', 'question', 'comma'].map((type) => (\n          <PunctuationCharacter\n            key={type}\n            type={type as PunctuationType}\n            onClick={() => {}}\n            isCorrect={undefined}\n            isDraggable={true}\n            onDrag={handleDrag}\n            onDragEnd={() => setActiveDropZone(null)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default GameScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}