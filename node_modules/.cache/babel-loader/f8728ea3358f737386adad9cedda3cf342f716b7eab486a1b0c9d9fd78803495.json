{"ast":null,"code":"var _jsxFileName = \"/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/GameScreen.tsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { Box, Typography, Button, Dialog, DialogContent, DialogActions } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport PunctuationCharacter from '../components/PunctuationCharacter';\nimport { shuffleArray } from '../utils/shuffle';\nimport { Button as CustomButton } from '../components/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst samplePhrases = {\n  period: [{\n    text: \"I love to play in the park\",\n    answer: \"period\",\n    position: 'end'\n  }, {\n    text: \"The sun is shining today\",\n    answer: \"period\",\n    position: 'end'\n  }],\n  exclamation: [{\n    text: \"What a wonderful day\",\n    answer: \"exclamation\",\n    position: 'end'\n  }, {\n    text: \"I canâ€™t believe it\",\n    answer: \"exclamation\",\n    position: 'end'\n  }],\n  question: [{\n    text: \"How are you today\",\n    answer: \"question\",\n    position: 'end'\n  }, {\n    text: \"Where did you go\",\n    answer: \"question\",\n    position: 'end'\n  }],\n  comma: [{\n    text: \"After the movie we went home\",\n    answer: \"comma\",\n    position: 2\n  },\n  // After index 2 (after \"movie\")\n  {\n    text: \"Yes I would love to\",\n    answer: \"comma\",\n    position: 0\n  } // After index 1 (after \"Yes\")\n  ]\n};\nconst punctuationTypes = ['period', 'exclamation', 'question', 'comma'];\nconst GameOverDialog = ({\n  open,\n  onClose,\n  score\n}) => /*#__PURE__*/_jsxDEV(Dialog, {\n  open: open,\n  onClose: onClose,\n  children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      sx: {\n        mb: 2\n      },\n      children: \"Time's Up!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        color: 'success.main',\n        mb: 1\n      },\n      children: [\"Correct Answers: \", score.correct]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        color: 'error.main',\n        mb: 2\n      },\n      children: [\"Incorrect Answers: \", score.incorrect]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      children: score.correct > score.incorrect ? \"Great job! You're getting really good at this!\" : \"Keep practicing, you're getting better!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onClose,\n      children: \"Play Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 57,\n  columnNumber: 3\n}, this);\n_c = GameOverDialog;\nconst GameScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    punctuationType,\n    settings\n  } = useGame();\n  const [currentPhrase, setCurrentPhrase] = React.useState(null);\n  const [isCorrect, setIsCorrect] = React.useState(null);\n  const [shuffledTypes, setShuffledTypes] = React.useState(['period', 'exclamation', 'question', 'comma']);\n  const [score, setScore] = React.useState({\n    correct: 0,\n    incorrect: 0\n  });\n  const [selectedMark, setSelectedMark] = React.useState(null);\n  const [feedback, setFeedback] = React.useState(null);\n  const [timeLeft, setTimeLeft] = React.useState(null);\n  const [gameOverOpen, setGameOverOpen] = React.useState(false);\n  const [hasStarted, setHasStarted] = React.useState(false);\n  const getRandomPhrase = React.useCallback(() => {\n    if (punctuationType === 'shuffle') {\n      // For shuffle mode, get all phrases and pick one randomly\n      const allPhrases = Object.values(samplePhrases).flat();\n      return allPhrases[Math.floor(Math.random() * allPhrases.length)];\n    } else if (punctuationType && samplePhrases[punctuationType]) {\n      // For specific punctuation type\n      const phrases = samplePhrases[punctuationType];\n      return phrases[Math.floor(Math.random() * phrases.length)];\n    }\n    return null;\n  }, [punctuationType]);\n  const loadNewPhrase = React.useCallback(() => {\n    const newPhrase = getRandomPhrase();\n    setCurrentPhrase(newPhrase);\n    setShuffledTypes(shuffleArray(punctuationTypes));\n    setIsCorrect(null);\n    setSelectedMark(null);\n    setFeedback(null);\n  }, [getRandomPhrase]);\n  React.useEffect(() => {\n    loadNewPhrase();\n  }, [loadNewPhrase]);\n  const startTimer = React.useCallback(() => {\n    if (!hasStarted && settings.timer) {\n      setHasStarted(true);\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [hasStarted, settings.timer, settings.timeLimit]);\n  React.useEffect(() => {\n    if (!hasStarted || !settings.timer) return;\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev === null || prev <= 0) {\n          clearInterval(timer);\n          setGameOverOpen(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [hasStarted, settings.timer]);\n  const getFeedbackMessage = (type, isCorrect) => {\n    if (isCorrect) {\n      return {\n        text: \"Great job! That's exactly right!\",\n        type: 'success'\n      };\n    }\n    const correctType = currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.answer;\n    switch (correctType) {\n      case 'period':\n        return {\n          text: \"This sentence needs a period to show it's complete.\",\n          type: 'error'\n        };\n      case 'question':\n        return {\n          text: \"This is a question, so it needs a question mark.\",\n          type: 'error'\n        };\n      case 'exclamation':\n        return {\n          text: \"This sentence shows strong feeling or emotion, so it needs an exclamation mark!\",\n          type: 'error'\n        };\n      case 'comma':\n        return {\n          text: \"A comma is needed here to separate parts of the sentence.\",\n          type: 'error'\n        };\n      default:\n        return {\n          text: \"That's not quite right. Try again!\",\n          type: 'error'\n        };\n    }\n  };\n  const handleCharacterSelect = type => {\n    console.log('Selected type:', type); // Debug log\n    console.log('Current phrase answer:', currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.answer); // Debug log\n\n    startTimer();\n    if (!currentPhrase) return;\n    const correct = type === currentPhrase.answer;\n    console.log('Is correct?', correct); // Debug log\n\n    setIsCorrect(correct);\n    setSelectedMark(type);\n    setFeedback(getFeedbackMessage(type, correct));\n    if (correct) {\n      setScore(prev => ({\n        ...prev,\n        correct: prev.correct + 1\n      }));\n      setTimeout(() => {\n        loadNewPhrase();\n        setSelectedMark(null);\n        setFeedback(null);\n        setIsCorrect(null);\n      }, 2000);\n    } else {\n      setScore(prev => ({\n        ...prev,\n        incorrect: prev.incorrect + 1\n      }));\n      setTimeout(() => {\n        setSelectedMark(null);\n        setFeedback(null);\n        setIsCorrect(null);\n      }, 2000);\n    }\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    const droppedType = e.dataTransfer.getData('application/punctuation');\n    if (droppedType) {\n      handleCharacterSelect(droppedType);\n    }\n  };\n  const handleDragOver = e => {\n    e.preventDefault(); // This is crucial for enabling drop\n    e.currentTarget.style.backgroundColor = 'rgba(0, 0, 0, 0.1)';\n  };\n  const handleDragLeave = e => {\n    e.preventDefault();\n    e.currentTarget.style.backgroundColor = 'transparent';\n  };\n  const handleDragStart = e => {\n    startTimer();\n    e.dataTransfer.setData('text/plain', e.currentTarget.id);\n  };\n  const renderPhrase = () => {\n    if (!currentPhrase) return null;\n    const words = currentPhrase.text.split(' ');\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        minHeight: '50vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        sx: {\n          fontFamily: '\"Bookman Old Style\", serif',\n          fontSize: '120px',\n          lineHeight: 1,\n          textAlign: 'left',\n          maxWidth: '80%',\n          margin: '0 auto'\n        },\n        children: words.map((word, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [word, (currentPhrase.position === index || index === words.length - 1 && currentPhrase.position === 'end') && /*#__PURE__*/_jsxDEV(Box, {\n            component: \"span\",\n            sx: {\n              display: 'inline-flex',\n              width: '100px',\n              height: '100px',\n              border: '4px dashed #ccc',\n              borderRadius: '20px',\n              mx: 2,\n              verticalAlign: 'middle',\n              justifyContent: 'center',\n              alignItems: 'center'\n            },\n            onDrop: handleDrop,\n            onDragOver: handleDragOver,\n            onDragLeave: handleDragLeave,\n            children: selectedMark && /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n              type: selectedMark,\n              onClick: () => {},\n              isCorrect: isCorrect,\n              isDraggable: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 17\n          }, this), ' ']\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this);\n  };\n  const handleGameOverClose = () => {\n    setGameOverOpen(false);\n    navigate('/select');\n  };\n  const formatTime = seconds => {\n    if (seconds === null) return \"0:00\";\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n  const TimerDisplay = () => /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      position: 'absolute',\n      top: 16,\n      right: 16,\n      backgroundColor: !hasStarted || timeLeft === null ? 'primary.main' : timeLeft < 10 ? 'error.main' : 'primary.main',\n      color: 'white',\n      borderRadius: '50%',\n      width: 80,\n      height: 80,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      transition: 'background-color 0.3s ease',\n      boxShadow: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        fontFamily: 'monospace',\n        fontWeight: 'bold'\n      },\n      children: formatTime(timeLeft)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 5\n  }, this);\n  React.useEffect(() => {\n    if (settings.timer) {\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [settings.timer, settings.timeLimit]);\n  const TopBar = () => /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      padding: '16px',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n      onClick: () => navigate('/select'),\n      children: \"DONE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      sx: {\n        fontFamily: '\"Rethink Sans\", Arial, sans-serif',\n        fontWeight: 800\n      },\n      children: [\"CORRECT: \", score.correct, \" INCORRECT: \", score.incorrect]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 5\n  }, this);\n  const CharacterRow = () => /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      justifyContent: 'center',\n      gap: 3,\n      position: 'fixed',\n      bottom: 40,\n      left: 0,\n      right: 0\n    },\n    children: shuffledTypes.map(type => /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n      type: type,\n      onClick: () => handleCharacterSelect(type),\n      isCorrect: isCorrect !== null ? type === (currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.answer) : undefined,\n      isDraggable: true,\n      onDragStart: handleDragStart\n    }, type, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 5\n  }, this);\n  const resetGame = () => {\n    const newPhrase = getRandomPhrase();\n    setCurrentPhrase(newPhrase);\n    setShuffledTypes(shuffleArray([...punctuationTypes]));\n    setIsCorrect(null);\n    setSelectedMark(null);\n    setFeedback(null);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: '100vh',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        padding: '24px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          flex: 1,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: renderPhrase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          gap: '32px',\n          padding: '24px',\n          minHeight: '160px' // Ensure enough space for largest character\n        },\n        children: shuffledTypes.map(type => /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n          type: type,\n          onClick: () => handleCharacterSelect(type),\n          isCorrect: isCorrect !== null ? type === (currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.answer) : undefined,\n          isDraggable: true,\n          onDragStart: () => setSelectedMark(null)\n        }, type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 396,\n    columnNumber: 5\n  }, this);\n};\n_s(GameScreen, \"ColXuvw3goVlvvgKccZ7RZZ1urY=\", false, function () {\n  return [useNavigate, useGame];\n});\n_c2 = GameScreen;\nexport default GameScreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"GameOverDialog\");\n$RefreshReg$(_c2, \"GameScreen\");","map":{"version":3,"names":["React","Box","Typography","Button","Dialog","DialogContent","DialogActions","useNavigate","useGame","PunctuationCharacter","shuffleArray","CustomButton","jsxDEV","_jsxDEV","samplePhrases","period","text","answer","position","exclamation","question","comma","punctuationTypes","GameOverDialog","open","onClose","score","children","variant","sx","mb","fileName","_jsxFileName","lineNumber","columnNumber","color","correct","incorrect","onClick","_c","GameScreen","_s","navigate","punctuationType","settings","currentPhrase","setCurrentPhrase","useState","isCorrect","setIsCorrect","shuffledTypes","setShuffledTypes","setScore","selectedMark","setSelectedMark","feedback","setFeedback","timeLeft","setTimeLeft","gameOverOpen","setGameOverOpen","hasStarted","setHasStarted","getRandomPhrase","useCallback","allPhrases","Object","values","flat","Math","floor","random","length","phrases","loadNewPhrase","newPhrase","useEffect","startTimer","timer","timeLimit","setInterval","prev","clearInterval","getFeedbackMessage","type","correctType","handleCharacterSelect","console","log","setTimeout","handleDrop","e","preventDefault","droppedType","dataTransfer","getData","handleDragOver","currentTarget","style","backgroundColor","handleDragLeave","handleDragStart","setData","id","renderPhrase","words","split","display","flexDirection","alignItems","justifyContent","minHeight","fontFamily","fontSize","lineHeight","textAlign","maxWidth","margin","map","word","index","Fragment","component","width","height","border","borderRadius","mx","verticalAlign","onDrop","onDragOver","onDragLeave","isDraggable","handleGameOverClose","formatTime","seconds","minutes","remainingSeconds","toString","padStart","TimerDisplay","top","right","transition","boxShadow","fontWeight","TopBar","padding","CharacterRow","gap","bottom","left","undefined","onDragStart","resetGame","flex","_c2","$RefreshReg$"],"sources":["/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/GameScreen.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Box, Typography, Button, Grid, Dialog, DialogContent, DialogActions } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport PunctuationCharacter from '../components/PunctuationCharacter';\nimport { shuffleArray } from '../utils/shuffle';\nimport { Button as CustomButton } from '../components/Button';\n\ntype Phrase = {\n  text: string;\n  answer: string;\n  position: 'end' | number; // 'end' or index where punctuation should go\n};\n\ntype PhraseCollection = {\n  period: Phrase[];\n  exclamation: Phrase[];\n  question: Phrase[];\n  comma: Phrase[];\n};\n\nconst samplePhrases: PhraseCollection = {\n  period: [\n    { text: \"I love to play in the park\", answer: \"period\", position: 'end' },\n    { text: \"The sun is shining today\", answer: \"period\", position: 'end' },\n  ],\n  exclamation: [\n    { text: \"What a wonderful day\", answer: \"exclamation\", position: 'end' },\n    { text: \"I canâ€™t believe it\", answer: \"exclamation\", position: 'end' },\n  ],\n  question: [\n    { text: \"How are you today\", answer: \"question\", position: 'end' },\n    { text: \"Where did you go\", answer: \"question\", position: 'end' },\n  ],\n  comma: [\n    { text: \"After the movie we went home\", answer: \"comma\", position: 2 }, // After index 2 (after \"movie\")\n    { text: \"Yes I would love to\", answer: \"comma\", position: 0 }, // After index 1 (after \"Yes\")\n  ],\n};\n\ntype PunctuationType = 'period' | 'exclamation' | 'question' | 'comma';\n\nconst punctuationTypes: PunctuationType[] = ['period', 'exclamation', 'question', 'comma'];\n\ninterface FeedbackMessage {\n  text: string;\n  type: 'success' | 'error';\n}\n\ninterface GameOverDialogProps {\n  open: boolean;\n  onClose: () => void;\n  score: { correct: number; incorrect: number };\n}\n\nconst GameOverDialog = ({ open, onClose, score }: GameOverDialogProps) => (\n  <Dialog open={open} onClose={onClose}>\n    <DialogContent>\n      <Typography variant=\"h4\" sx={{ mb: 2 }}>Time's Up!</Typography>\n      <Typography variant=\"h6\" sx={{ color: 'success.main', mb: 1 }}>\n        Correct Answers: {score.correct}\n      </Typography>\n      <Typography variant=\"h6\" sx={{ color: 'error.main', mb: 2 }}>\n        Incorrect Answers: {score.incorrect}\n      </Typography>\n      <Typography variant=\"body1\">\n        {score.correct > score.incorrect \n          ? \"Great job! You're getting really good at this!\" \n          : \"Keep practicing, you're getting better!\"}\n      </Typography>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose}>Play Again</Button>\n    </DialogActions>\n  </Dialog>\n);\n\nconst GameScreen = () => {\n  const navigate = useNavigate();\n  const { punctuationType, settings } = useGame();\n  const [currentPhrase, setCurrentPhrase] = React.useState<Phrase | null>(null);\n  const [isCorrect, setIsCorrect] = React.useState<boolean | null>(null);\n  const [shuffledTypes, setShuffledTypes] = React.useState<PunctuationType[]>(['period', 'exclamation', 'question', 'comma']);\n  const [score, setScore] = React.useState({ correct: 0, incorrect: 0 });\n  const [selectedMark, setSelectedMark] = React.useState<PunctuationType | null>(null);\n  const [feedback, setFeedback] = React.useState<FeedbackMessage | null>(null);\n  const [timeLeft, setTimeLeft] = React.useState<number | null>(null);\n  const [gameOverOpen, setGameOverOpen] = React.useState(false);\n  const [hasStarted, setHasStarted] = React.useState(false);\n\n  const getRandomPhrase = React.useCallback(() => {\n    if (punctuationType === 'shuffle') {\n      // For shuffle mode, get all phrases and pick one randomly\n      const allPhrases = Object.values(samplePhrases).flat();\n      return allPhrases[Math.floor(Math.random() * allPhrases.length)];\n    } else if (punctuationType && samplePhrases[punctuationType]) {\n      // For specific punctuation type\n      const phrases = samplePhrases[punctuationType];\n      return phrases[Math.floor(Math.random() * phrases.length)];\n    }\n    return null;\n  }, [punctuationType]);\n\n  const loadNewPhrase = React.useCallback(() => {\n    const newPhrase = getRandomPhrase();\n    setCurrentPhrase(newPhrase);\n    setShuffledTypes(shuffleArray(punctuationTypes));\n    setIsCorrect(null);\n    setSelectedMark(null);\n    setFeedback(null);\n  }, [getRandomPhrase]);\n\n  React.useEffect(() => {\n    loadNewPhrase();\n  }, [loadNewPhrase]);\n\n  const startTimer = React.useCallback(() => {\n    if (!hasStarted && settings.timer) {\n      setHasStarted(true);\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [hasStarted, settings.timer, settings.timeLimit]);\n\n  React.useEffect(() => {\n    if (!hasStarted || !settings.timer) return;\n\n    const timer = setInterval(() => {\n      setTimeLeft((prev) => {\n        if (prev === null || prev <= 0) {\n          clearInterval(timer);\n          setGameOverOpen(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [hasStarted, settings.timer]);\n\n  const getFeedbackMessage = (type: string, isCorrect: boolean): FeedbackMessage => {\n    if (isCorrect) {\n      return {\n        text: \"Great job! That's exactly right!\",\n        type: 'success'\n      };\n    }\n\n    const correctType = currentPhrase?.answer;\n    switch (correctType) {\n      case 'period':\n        return {\n          text: \"This sentence needs a period to show it's complete.\",\n          type: 'error'\n        };\n      case 'question':\n        return {\n          text: \"This is a question, so it needs a question mark.\",\n          type: 'error'\n        };\n      case 'exclamation':\n        return {\n          text: \"This sentence shows strong feeling or emotion, so it needs an exclamation mark!\",\n          type: 'error'\n        };\n      case 'comma':\n        return {\n          text: \"A comma is needed here to separate parts of the sentence.\",\n          type: 'error'\n        };\n      default:\n        return {\n          text: \"That's not quite right. Try again!\",\n          type: 'error'\n        };\n    }\n  };\n\n  const handleCharacterSelect = (type: PunctuationType) => {\n    console.log('Selected type:', type); // Debug log\n    console.log('Current phrase answer:', currentPhrase?.answer); // Debug log\n    \n    startTimer();\n    if (!currentPhrase) return;\n    \n    const correct = type === currentPhrase.answer;\n    console.log('Is correct?', correct); // Debug log\n    \n    setIsCorrect(correct);\n    setSelectedMark(type);\n    setFeedback(getFeedbackMessage(type, correct));\n    \n    if (correct) {\n      setScore(prev => ({ ...prev, correct: prev.correct + 1 }));\n      setTimeout(() => {\n        loadNewPhrase();\n        setSelectedMark(null);\n        setFeedback(null);\n        setIsCorrect(null);\n      }, 2000);\n    } else {\n      setScore(prev => ({ ...prev, incorrect: prev.incorrect + 1 }));\n      setTimeout(() => {\n        setSelectedMark(null);\n        setFeedback(null);\n        setIsCorrect(null);\n      }, 2000);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    const droppedType = e.dataTransfer.getData('application/punctuation') as PunctuationType;\n    \n    if (droppedType) {\n      handleCharacterSelect(droppedType);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault(); // This is crucial for enabling drop\n    e.currentTarget.style.backgroundColor = 'rgba(0, 0, 0, 0.1)';\n  };\n\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.currentTarget.style.backgroundColor = 'transparent';\n  };\n\n  const handleDragStart = (e: React.DragEvent) => {\n    startTimer();\n    e.dataTransfer.setData('text/plain', e.currentTarget.id);\n  };\n\n  const renderPhrase = () => {\n    if (!currentPhrase) return null;\n\n    const words = currentPhrase.text.split(' ');\n    \n    return (\n      <Box sx={{ \n        display: 'flex', \n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        minHeight: '50vh'\n      }}>\n        <Typography sx={{\n          fontFamily: '\"Bookman Old Style\", serif',\n          fontSize: '120px',\n          lineHeight: 1,\n          textAlign: 'left',\n          maxWidth: '80%',\n          margin: '0 auto'\n        }}>\n          {words.map((word, index) => (\n            <React.Fragment key={index}>\n              {word}\n              {(currentPhrase.position === index || \n                (index === words.length - 1 && currentPhrase.position === 'end')) && (\n                <Box\n                  component=\"span\"\n                  sx={{\n                    display: 'inline-flex',\n                    width: '100px',\n                    height: '100px',\n                    border: '4px dashed #ccc',\n                    borderRadius: '20px',\n                    mx: 2,\n                    verticalAlign: 'middle',\n                    justifyContent: 'center',\n                    alignItems: 'center'\n                  }}\n                  onDrop={handleDrop}\n                  onDragOver={handleDragOver}\n                  onDragLeave={handleDragLeave}\n                >\n                  {selectedMark && (\n                    <PunctuationCharacter\n                      type={selectedMark}\n                      onClick={() => {}}\n                      isCorrect={isCorrect}\n                      isDraggable={false}\n                    />\n                  )}\n                </Box>\n              )}\n              {' '}\n            </React.Fragment>\n          ))}\n        </Typography>\n      </Box>\n    );\n  };\n\n  const handleGameOverClose = () => {\n    setGameOverOpen(false);\n    navigate('/select');\n  };\n\n  const formatTime = (seconds: number | null): string => {\n    if (seconds === null) return \"0:00\";\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const TimerDisplay = () => (\n    <Box sx={{ \n      position: 'absolute',\n      top: 16,\n      right: 16,\n      backgroundColor: (!hasStarted || timeLeft === null) ? 'primary.main' :\n                      timeLeft < 10 ? 'error.main' : 'primary.main',\n      color: 'white',\n      borderRadius: '50%',\n      width: 80,\n      height: 80,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      transition: 'background-color 0.3s ease',\n      boxShadow: 2\n    }}>\n      <Typography \n        variant=\"h6\" \n        sx={{ \n          fontFamily: 'monospace',\n          fontWeight: 'bold'\n        }}\n      >\n        {formatTime(timeLeft)}\n      </Typography>\n    </Box>\n  );\n\n  React.useEffect(() => {\n    if (settings.timer) {\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [settings.timer, settings.timeLimit]);\n\n  const TopBar = () => (\n    <Box sx={{ \n      display: 'flex', \n      justifyContent: 'space-between', \n      alignItems: 'center',\n      padding: '16px',\n      width: '100%'\n    }}>\n      <CustomButton onClick={() => navigate('/select')}>\n        DONE\n      </CustomButton>\n      <Typography sx={{ \n        fontFamily: '\"Rethink Sans\", Arial, sans-serif',\n        fontWeight: 800\n      }}>\n        CORRECT: {score.correct} INCORRECT: {score.incorrect}\n      </Typography>\n    </Box>\n  );\n\n  const CharacterRow = () => (\n    <Box sx={{ \n      display: 'flex', \n      justifyContent: 'center', \n      gap: 3,\n      position: 'fixed',\n      bottom: 40,\n      left: 0,\n      right: 0\n    }}>\n      {shuffledTypes.map((type) => (\n        <PunctuationCharacter\n          key={type}\n          type={type}\n          onClick={() => handleCharacterSelect(type)}\n          isCorrect={isCorrect !== null ? type === currentPhrase?.answer : undefined}\n          isDraggable={true}\n          onDragStart={handleDragStart}\n        />\n      ))}\n    </Box>\n  );\n\n  const resetGame = () => {\n    const newPhrase = getRandomPhrase();\n    setCurrentPhrase(newPhrase);\n    setShuffledTypes(shuffleArray([...punctuationTypes]));\n    setIsCorrect(null);\n    setSelectedMark(null);\n    setFeedback(null);\n  };\n\n  return (\n    <Box sx={{ \n      height: '100vh',\n      display: 'flex',\n      flexDirection: 'column'\n    }}>\n      <TopBar />\n      \n      {/* Main game area */}\n      <Box sx={{ \n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        padding: '24px'\n      }}>\n        {/* Phrase area */}\n        <Box sx={{ \n          flex: 1,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }}>\n          {renderPhrase()}\n        </Box>\n\n        {/* Characters area */}\n        <Box sx={{ \n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          gap: '32px',\n          padding: '24px',\n          minHeight: '160px'  // Ensure enough space for largest character\n        }}>\n          {shuffledTypes.map((type) => (\n            <PunctuationCharacter\n              key={type}\n              type={type}\n              onClick={() => handleCharacterSelect(type)}\n              isCorrect={isCorrect !== null ? type === currentPhrase?.answer : undefined}\n              isDraggable={true}\n              onDragStart={() => setSelectedMark(null)}\n            />\n          ))}\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default GameScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}