{"ast":null,"code":"var _jsxFileName = \"/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/GameScreen.tsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { Box, Typography, Button, Grid, Dialog, DialogContent, DialogActions } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport PunctuationCharacter from '../components/PunctuationCharacter';\nimport { shuffleArray } from '../utils/shuffle';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst samplePhrases = {\n  period: [{\n    text: \"I love to play in the park\",\n    answer: \"period\",\n    position: 'end'\n  }, {\n    text: \"The sun is shining today\",\n    answer: \"period\",\n    position: 'end'\n  }],\n  exclamation: [{\n    text: \"What a wonderful day\",\n    answer: \"exclamation\",\n    position: 'end'\n  }, {\n    text: \"I can't believe it\",\n    answer: \"exclamation\",\n    position: 'end'\n  }],\n  question: [{\n    text: \"How are you today\",\n    answer: \"question\",\n    position: 'end'\n  }, {\n    text: \"Where did you go\",\n    answer: \"question\",\n    position: 'end'\n  }],\n  comma: [{\n    text: \"After the movie we went home\",\n    answer: \"comma\",\n    position: 2\n  },\n  // After index 2 (after \"movie\")\n  {\n    text: \"Yes I would love to\",\n    answer: \"comma\",\n    position: 1\n  } // After index 1 (after \"Yes\")\n  ]\n};\nconst punctuationTypes = ['period', 'exclamation', 'question', 'comma'];\nconst GameOverDialog = ({\n  open,\n  onClose,\n  score\n}) => /*#__PURE__*/_jsxDEV(Dialog, {\n  open: open,\n  onClose: onClose,\n  children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      sx: {\n        mb: 2\n      },\n      children: \"Time's Up!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        color: 'success.main',\n        mb: 1\n      },\n      children: [\"Correct Answers: \", score.correct]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        color: 'error.main',\n        mb: 2\n      },\n      children: [\"Incorrect Answers: \", score.incorrect]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      children: score.correct > score.incorrect ? \"Great job! You're getting really good at this!\" : \"Keep practicing, you're getting better!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onClose,\n      children: \"Play Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 54,\n  columnNumber: 3\n}, this);\n_c = GameOverDialog;\nconst GameScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    punctuationType,\n    settings\n  } = useGame();\n  const [currentPhrase, setCurrentPhrase] = React.useState(null);\n  const [isCorrect, setIsCorrect] = React.useState(null);\n  const [shuffledTypes, setShuffledTypes] = React.useState(punctuationTypes);\n  const [score, setScore] = React.useState({\n    correct: 0,\n    incorrect: 0\n  });\n  const [selectedMark, setSelectedMark] = React.useState(null);\n  const [feedback, setFeedback] = React.useState(null);\n  const [timeLeft, setTimeLeft] = React.useState(null);\n  const [gameOverOpen, setGameOverOpen] = React.useState(false);\n  const [hasStarted, setHasStarted] = React.useState(false);\n  const loadNewPhrase = React.useCallback(() => {\n    if (punctuationType && punctuationType !== 'shuffle' && samplePhrases[punctuationType]) {\n      const phrases = samplePhrases[punctuationType];\n      setCurrentPhrase(phrases[Math.floor(Math.random() * phrases.length)]);\n      setShuffledTypes(shuffleArray(punctuationTypes));\n    }\n  }, [punctuationType]);\n  React.useEffect(() => {\n    loadNewPhrase();\n  }, [loadNewPhrase]);\n  const startTimer = React.useCallback(() => {\n    if (!hasStarted && settings.timer) {\n      setHasStarted(true);\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [hasStarted, settings.timer, settings.timeLimit]);\n  React.useEffect(() => {\n    if (!hasStarted || !settings.timer) return;\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev === null || prev <= 0) {\n          clearInterval(timer);\n          setGameOverOpen(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [hasStarted, settings.timer]);\n  const getFeedbackMessage = (type, isCorrect) => {\n    if (isCorrect) {\n      return {\n        text: \"Great job! That's exactly right!\",\n        type: 'success'\n      };\n    }\n    const correctType = currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.answer;\n    switch (correctType) {\n      case 'period':\n        return {\n          text: \"This sentence needs a period to show it's complete.\",\n          type: 'error'\n        };\n      case 'question':\n        return {\n          text: \"This is a question, so it needs a question mark.\",\n          type: 'error'\n        };\n      case 'exclamation':\n        return {\n          text: \"This sentence shows strong feeling or emotion, so it needs an exclamation mark!\",\n          type: 'error'\n        };\n      case 'comma':\n        return {\n          text: \"A comma is needed here to separate parts of the sentence.\",\n          type: 'error'\n        };\n      default:\n        return {\n          text: \"That's not quite right. Try again!\",\n          type: 'error'\n        };\n    }\n  };\n  const handleCharacterSelect = type => {\n    startTimer();\n    if (!currentPhrase) return;\n    const correct = type === currentPhrase.answer;\n    setIsCorrect(correct);\n    setSelectedMark(type);\n    setFeedback(getFeedbackMessage(type, correct));\n    if (correct) {\n      setScore(prev => ({\n        ...prev,\n        correct: prev.correct + 1\n      }));\n      setTimeout(() => {\n        loadNewPhrase();\n        setSelectedMark(null);\n        setFeedback(null);\n        setIsCorrect(null);\n      }, 2000);\n    } else {\n      setScore(prev => ({\n        ...prev,\n        incorrect: prev.incorrect + 1\n      }));\n      setTimeout(() => {\n        setSelectedMark(null);\n        setFeedback(null);\n        setIsCorrect(null);\n      }, 2000);\n    }\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    const type = e.dataTransfer.getData('text/plain');\n    if (!currentPhrase) return;\n\n    // Check if the drop position matches the correct position\n    handleCharacterSelect(type);\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n    e.currentTarget.style.backgroundColor = '#f0f0f0';\n  };\n  const handleDragLeave = e => {\n    e.currentTarget.style.backgroundColor = 'transparent';\n  };\n  const handleDragStart = e => {\n    startTimer();\n    e.dataTransfer.setData('text/plain', e.currentTarget.id);\n  };\n  const renderPhrase = () => {\n    if (!currentPhrase) return null;\n    const words = currentPhrase.text.split(' ');\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        gap: 1\n      },\n      children: words.map((word, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          component: \"span\",\n          children: word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this), (currentPhrase.position === index || index === words.length - 1 && currentPhrase.position === 'end') && /*#__PURE__*/_jsxDEV(Box, {\n          component: \"div\",\n          sx: {\n            width: selectedMark ? 60 : 20,\n            height: 40,\n            border: selectedMark ? 'none' : '2px dashed #ccc',\n            borderRadius: 1,\n            mx: 1,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            transition: 'all 0.3s ease'\n          },\n          onDrop: handleDrop,\n          onDragOver: handleDragOver,\n          onDragLeave: handleDragLeave,\n          children: selectedMark && /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n            type: selectedMark,\n            onClick: () => {},\n            isCorrect: isCorrect,\n            isDraggable: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this);\n  };\n  const handleGameOverClose = () => {\n    setGameOverOpen(false);\n    navigate('/select');\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 4,\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'absolute',\n        top: 16,\n        left: 16,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-start',\n        gap: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => navigate('/select'),\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        sx: {\n          color: 'success.main'\n        },\n        children: [\"Correct: \", score.correct]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        sx: {\n          color: 'error.main'\n        },\n        children: [\"Incorrect: \", score.incorrect]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), settings.timer && timeLeft !== null && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'absolute',\n        top: 16,\n        right: 16,\n        backgroundColor: timeLeft < 10 ? 'error.main' : 'primary.main',\n        color: 'white',\n        borderRadius: '50%',\n        width: 60,\n        height: 60,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        transition: 'background-color 0.3s ease',\n        boxShadow: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: timeLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }, this), currentPhrase && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        component: \"div\",\n        sx: {\n          mb: 4\n        },\n        children: renderPhrase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this), feedback && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mb: 4,\n          color: feedback.type === 'success' ? 'success.main' : 'error.main',\n          animation: 'fadeIn 0.5s ease-in'\n        },\n        children: feedback.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        justifyContent: \"center\",\n        children: shuffledTypes.map(type => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n            type: type,\n            onClick: () => handleCharacterSelect(type),\n            isCorrect: isCorrect !== null ? type === currentPhrase.answer : undefined,\n            isDraggable: true,\n            onDragStart: handleDragStart\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 17\n          }, this)\n        }, type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(GameOverDialog, {\n      open: gameOverOpen,\n      onClose: handleGameOverClose,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n_s(GameScreen, \"iCbnUBvqr+2rlSUXR7DIHQdLLPE=\", false, function () {\n  return [useNavigate, useGame];\n});\n_c2 = GameScreen;\nexport default GameScreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"GameOverDialog\");\n$RefreshReg$(_c2, \"GameScreen\");","map":{"version":3,"names":["React","Box","Typography","Button","Grid","Dialog","DialogContent","DialogActions","useNavigate","useGame","PunctuationCharacter","shuffleArray","jsxDEV","_jsxDEV","Fragment","_Fragment","samplePhrases","period","text","answer","position","exclamation","question","comma","punctuationTypes","GameOverDialog","open","onClose","score","children","variant","sx","mb","fileName","_jsxFileName","lineNumber","columnNumber","color","correct","incorrect","onClick","_c","GameScreen","_s","navigate","punctuationType","settings","currentPhrase","setCurrentPhrase","useState","isCorrect","setIsCorrect","shuffledTypes","setShuffledTypes","setScore","selectedMark","setSelectedMark","feedback","setFeedback","timeLeft","setTimeLeft","gameOverOpen","setGameOverOpen","hasStarted","setHasStarted","loadNewPhrase","useCallback","phrases","Math","floor","random","length","useEffect","startTimer","timer","timeLimit","setInterval","prev","clearInterval","getFeedbackMessage","type","correctType","handleCharacterSelect","setTimeout","handleDrop","e","preventDefault","dataTransfer","getData","handleDragOver","currentTarget","style","backgroundColor","handleDragLeave","handleDragStart","setData","id","renderPhrase","words","split","display","flexWrap","justifyContent","gap","map","word","index","component","width","height","border","borderRadius","mx","alignItems","transition","onDrop","onDragOver","onDragLeave","isDraggable","handleGameOverClose","formatTime","seconds","mins","secs","toString","padStart","p","textAlign","top","left","flexDirection","right","boxShadow","animation","container","spacing","item","undefined","onDragStart","_c2","$RefreshReg$"],"sources":["/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/GameScreen.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Box, Typography, Button, Grid, Dialog, DialogContent, DialogActions } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport PunctuationCharacter from '../components/PunctuationCharacter';\nimport { shuffleArray } from '../utils/shuffle';\n\ntype Phrase = {\n  text: string;\n  answer: string;\n  position: 'end' | number; // 'end' or index where punctuation should go\n};\n\ntype PhraseCollection = {\n  period: Phrase[];\n  exclamation: Phrase[];\n  question: Phrase[];\n  comma: Phrase[];\n};\n\nconst samplePhrases: PhraseCollection = {\n  period: [\n    { text: \"I love to play in the park\", answer: \"period\", position: 'end' },\n    { text: \"The sun is shining today\", answer: \"period\", position: 'end' },\n  ],\n  exclamation: [\n    { text: \"What a wonderful day\", answer: \"exclamation\", position: 'end' },\n    { text: \"I can't believe it\", answer: \"exclamation\", position: 'end' },\n  ],\n  question: [\n    { text: \"How are you today\", answer: \"question\", position: 'end' },\n    { text: \"Where did you go\", answer: \"question\", position: 'end' },\n  ],\n  comma: [\n    { text: \"After the movie we went home\", answer: \"comma\", position: 2 }, // After index 2 (after \"movie\")\n    { text: \"Yes I would love to\", answer: \"comma\", position: 1 }, // After index 1 (after \"Yes\")\n  ],\n};\n\nconst punctuationTypes = ['period', 'exclamation', 'question', 'comma'];\n\ninterface FeedbackMessage {\n  text: string;\n  type: 'success' | 'error';\n}\n\ninterface GameOverDialogProps {\n  open: boolean;\n  onClose: () => void;\n  score: { correct: number; incorrect: number };\n}\n\nconst GameOverDialog = ({ open, onClose, score }: GameOverDialogProps) => (\n  <Dialog open={open} onClose={onClose}>\n    <DialogContent>\n      <Typography variant=\"h4\" sx={{ mb: 2 }}>Time's Up!</Typography>\n      <Typography variant=\"h6\" sx={{ color: 'success.main', mb: 1 }}>\n        Correct Answers: {score.correct}\n      </Typography>\n      <Typography variant=\"h6\" sx={{ color: 'error.main', mb: 2 }}>\n        Incorrect Answers: {score.incorrect}\n      </Typography>\n      <Typography variant=\"body1\">\n        {score.correct > score.incorrect \n          ? \"Great job! You're getting really good at this!\" \n          : \"Keep practicing, you're getting better!\"}\n      </Typography>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose}>Play Again</Button>\n    </DialogActions>\n  </Dialog>\n);\n\nconst GameScreen = () => {\n  const navigate = useNavigate();\n  const { punctuationType, settings } = useGame();\n  const [currentPhrase, setCurrentPhrase] = React.useState<Phrase | null>(null);\n  const [isCorrect, setIsCorrect] = React.useState<boolean | null>(null);\n  const [shuffledTypes, setShuffledTypes] = React.useState(punctuationTypes);\n  const [score, setScore] = React.useState({ correct: 0, incorrect: 0 });\n  const [selectedMark, setSelectedMark] = React.useState<string | null>(null);\n  const [feedback, setFeedback] = React.useState<FeedbackMessage | null>(null);\n  const [timeLeft, setTimeLeft] = React.useState<number | null>(null);\n  const [gameOverOpen, setGameOverOpen] = React.useState(false);\n  const [hasStarted, setHasStarted] = React.useState(false);\n\n  const loadNewPhrase = React.useCallback(() => {\n    if (punctuationType && punctuationType !== 'shuffle' && samplePhrases[punctuationType]) {\n      const phrases = samplePhrases[punctuationType];\n      setCurrentPhrase(phrases[Math.floor(Math.random() * phrases.length)]);\n      setShuffledTypes(shuffleArray(punctuationTypes));\n    }\n  }, [punctuationType]);\n\n  React.useEffect(() => {\n    loadNewPhrase();\n  }, [loadNewPhrase]);\n\n  const startTimer = React.useCallback(() => {\n    if (!hasStarted && settings.timer) {\n      setHasStarted(true);\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [hasStarted, settings.timer, settings.timeLimit]);\n\n  React.useEffect(() => {\n    if (!hasStarted || !settings.timer) return;\n\n    const timer = setInterval(() => {\n      setTimeLeft((prev) => {\n        if (prev === null || prev <= 0) {\n          clearInterval(timer);\n          setGameOverOpen(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [hasStarted, settings.timer]);\n\n  const getFeedbackMessage = (type: string, isCorrect: boolean): FeedbackMessage => {\n    if (isCorrect) {\n      return {\n        text: \"Great job! That's exactly right!\",\n        type: 'success'\n      };\n    }\n\n    const correctType = currentPhrase?.answer;\n    switch (correctType) {\n      case 'period':\n        return {\n          text: \"This sentence needs a period to show it's complete.\",\n          type: 'error'\n        };\n      case 'question':\n        return {\n          text: \"This is a question, so it needs a question mark.\",\n          type: 'error'\n        };\n      case 'exclamation':\n        return {\n          text: \"This sentence shows strong feeling or emotion, so it needs an exclamation mark!\",\n          type: 'error'\n        };\n      case 'comma':\n        return {\n          text: \"A comma is needed here to separate parts of the sentence.\",\n          type: 'error'\n        };\n      default:\n        return {\n          text: \"That's not quite right. Try again!\",\n          type: 'error'\n        };\n    }\n  };\n\n  const handleCharacterSelect = (type: string) => {\n    startTimer();\n    if (!currentPhrase) return;\n    \n    const correct = type === currentPhrase.answer;\n    setIsCorrect(correct);\n    setSelectedMark(type);\n    setFeedback(getFeedbackMessage(type, correct));\n    \n    if (correct) {\n      setScore(prev => ({ ...prev, correct: prev.correct + 1 }));\n      setTimeout(() => {\n        loadNewPhrase();\n        setSelectedMark(null);\n        setFeedback(null);\n        setIsCorrect(null);\n      }, 2000);\n    } else {\n      setScore(prev => ({ ...prev, incorrect: prev.incorrect + 1 }));\n      setTimeout(() => {\n        setSelectedMark(null);\n        setFeedback(null);\n        setIsCorrect(null);\n      }, 2000);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    const type = e.dataTransfer.getData('text/plain');\n    \n    if (!currentPhrase) return;\n    \n    // Check if the drop position matches the correct position\n    handleCharacterSelect(type);\n  };\n\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.currentTarget.style.backgroundColor = '#f0f0f0';\n  };\n\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n    e.currentTarget.style.backgroundColor = 'transparent';\n  };\n\n  const handleDragStart = (e: React.DragEvent) => {\n    startTimer();\n    e.dataTransfer.setData('text/plain', e.currentTarget.id);\n  };\n\n  const renderPhrase = () => {\n    if (!currentPhrase) return null;\n\n    const words = currentPhrase.text.split(' ');\n    \n    return (\n      <Box sx={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center', gap: 1 }}>\n        {words.map((word, index) => (\n          <React.Fragment key={index}>\n            <Typography variant=\"h4\" component=\"span\">\n              {word}\n            </Typography>\n            {(currentPhrase.position === index || \n              (index === words.length - 1 && currentPhrase.position === 'end')) && (\n              <Box\n                component=\"div\"\n                sx={{\n                  width: selectedMark ? 60 : 20,\n                  height: 40,\n                  border: selectedMark ? 'none' : '2px dashed #ccc',\n                  borderRadius: 1,\n                  mx: 1,\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  transition: 'all 0.3s ease'\n                }}\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragLeave={handleDragLeave}\n              >\n                {selectedMark && (\n                  <PunctuationCharacter\n                    type={selectedMark}\n                    onClick={() => {}}\n                    isCorrect={isCorrect}\n                    isDraggable={false}\n                  />\n                )}\n              </Box>\n            )}\n          </React.Fragment>\n        ))}\n      </Box>\n    );\n  };\n\n  const handleGameOverClose = () => {\n    setGameOverOpen(false);\n    navigate('/select');\n  };\n\n  const formatTime = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <Box sx={{ p: 4, textAlign: 'center' }}>\n      <Box sx={{ \n        position: 'absolute', \n        top: 16, \n        left: 16, \n        display: 'flex', \n        flexDirection: 'column', \n        alignItems: 'flex-start', \n        gap: 1 \n      }}>\n        <Button onClick={() => navigate('/select')}>\n          Done\n        </Button>\n        <Typography variant=\"body2\" sx={{ color: 'success.main' }}>\n          Correct: {score.correct}\n        </Typography>\n        <Typography variant=\"body2\" sx={{ color: 'error.main' }}>\n          Incorrect: {score.incorrect}\n        </Typography>\n      </Box>\n\n      {settings.timer && timeLeft !== null && (\n        <Box sx={{ \n          position: 'absolute',\n          top: 16,\n          right: 16,\n          backgroundColor: timeLeft < 10 ? 'error.main' : 'primary.main',\n          color: 'white',\n          borderRadius: '50%',\n          width: 60,\n          height: 60,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          transition: 'background-color 0.3s ease',\n          boxShadow: 2\n        }}>\n          <Typography variant=\"h5\">\n            {timeLeft}\n          </Typography>\n        </Box>\n      )}\n\n      {currentPhrase && (\n        <>\n          <Box component=\"div\" sx={{ mb: 4 }}>\n            {renderPhrase()}\n          </Box>\n\n          {feedback && (\n            <Typography\n              variant=\"h6\"\n              sx={{\n                mb: 4,\n                color: feedback.type === 'success' ? 'success.main' : 'error.main',\n                animation: 'fadeIn 0.5s ease-in'\n              }}\n            >\n              {feedback.text}\n            </Typography>\n          )}\n\n          <Grid container spacing={2} justifyContent=\"center\">\n            {shuffledTypes.map((type) => (\n              <Grid item key={type}>\n                <PunctuationCharacter\n                  type={type}\n                  onClick={() => handleCharacterSelect(type)}\n                  isCorrect={isCorrect !== null ? type === currentPhrase.answer : undefined}\n                  isDraggable={true}\n                  onDragStart={handleDragStart}\n                />\n              </Grid>\n            ))}\n          </Grid>\n        </>\n      )}\n\n      <GameOverDialog\n        open={gameOverOpen}\n        onClose={handleGameOverClose}\n        score={score}\n      />\n    </Box>\n  );\n};\n\nexport default GameScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}