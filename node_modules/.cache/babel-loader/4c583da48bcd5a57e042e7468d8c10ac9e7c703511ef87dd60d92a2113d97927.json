{"ast":null,"code":"var _jsxFileName = \"/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/GameScreen.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport PunctuationCharacter from '../components/PunctuationCharacter';\nimport { shuffleArray } from '../utils/shuffle';\nimport { Button } from '../components/Button';\nimport '../styles/GameScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst samplePhrases = {\n  period: [{\n    text: \"I love to play in the park\",\n    answer: \"period\",\n    position: 'end'\n  }, {\n    text: \"The sun is shining today\",\n    answer: \"period\",\n    position: 'end'\n  }],\n  exclamation: [{\n    text: \"What a wonderful day\",\n    answer: \"exclamation\",\n    position: 'end'\n  }, {\n    text: \"I canâ€™t believe it\",\n    answer: \"exclamation\",\n    position: 'end'\n  }],\n  question: [{\n    text: \"How are you today\",\n    answer: \"question\",\n    position: 'end'\n  }, {\n    text: \"Where did you go\",\n    answer: \"question\",\n    position: 'end'\n  }],\n  comma: [{\n    text: \"After the movie we went home\",\n    answer: \"comma\",\n    position: 2\n  },\n  // After index 2 (after \"movie\")\n  {\n    text: \"Yes I would love to\",\n    answer: \"comma\",\n    position: 0\n  } // After index 1 (after \"Yes\")\n  ]\n};\nconst punctuationTypes = ['period', 'exclamation', 'question', 'comma'];\nconst GameOverDialog = ({\n  open,\n  onClose,\n  score\n}) => /*#__PURE__*/_jsxDEV(\"dialog\", {\n  open: open,\n  className: \"game-over-dialog\",\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dialog-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Time's Up!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"score-correct\",\n      children: [\"Correct Answers: \", score.correct]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"score-incorrect\",\n      children: [\"Incorrect Answers: \", score.incorrect]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"feedback\",\n      children: score.correct > score.incorrect ? \"Great job! You're getting really good at this!\" : \"Keep practicing, you're getting better!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dialog-actions\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 57,\n  columnNumber: 3\n}, this);\n_c = GameOverDialog;\nconst GameScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    punctuationType,\n    settings\n  } = useGame();\n  const [currentPhraseIndex, setCurrentPhraseIndex] = React.useState(0);\n  const [currentPhrase, setCurrentPhrase] = React.useState(null);\n  const [selectedMark, setSelectedMark] = React.useState(null);\n  const [isCorrect, setIsCorrect] = React.useState(null);\n  const [score, setScore] = React.useState({\n    correct: 0,\n    incorrect: 0\n  });\n  const [hasStarted, setHasStarted] = React.useState(false);\n  const [timeLeft, setTimeLeft] = React.useState(null);\n  const [gameOverOpen, setGameOverOpen] = React.useState(false);\n  const [shuffledTypes, setShuffledTypes] = React.useState(['period', 'exclamation', 'question', 'comma']);\n  const [feedback, setFeedback] = React.useState(null);\n  const timerRef = React.useRef(null);\n  const phrases = React.useMemo(() => shuffleArray(Object.values(samplePhrases).flat()), []);\n  React.useEffect(() => {\n    setCurrentPhrase(phrases[currentPhraseIndex]);\n  }, [currentPhraseIndex, phrases]);\n  const startTimer = React.useCallback(() => {\n    if (!hasStarted && settings.timer) {\n      setHasStarted(true);\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [hasStarted, settings.timer, settings.timeLimit]);\n  React.useEffect(() => {\n    if (hasStarted && settings.timer && timeLeft !== null && timeLeft > 0) {\n      timerRef.current = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev === null || prev <= 1) {\n            if (timerRef.current) {\n              clearInterval(timerRef.current);\n            }\n            setGameOverOpen(true);\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n      return () => {\n        if (timerRef.current) {\n          clearInterval(timerRef.current);\n        }\n      };\n    }\n  }, [hasStarted, settings.timer, timeLeft]);\n  React.useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, []);\n  const handleFirstInteraction = () => {\n    startTimer();\n  };\n  const getFeedbackMessage = (type, isCorrect) => {\n    if (isCorrect) {\n      return {\n        text: \"Great job! That's exactly right!\",\n        type: 'success'\n      };\n    }\n    const correctType = currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.answer;\n    switch (correctType) {\n      case 'period':\n        return {\n          text: \"This sentence needs a period to show it's complete.\",\n          type: 'error'\n        };\n      case 'question':\n        return {\n          text: \"This is a question, so it needs a question mark.\",\n          type: 'error'\n        };\n      case 'exclamation':\n        return {\n          text: \"This sentence shows strong feeling or emotion, so it needs an exclamation mark!\",\n          type: 'error'\n        };\n      case 'comma':\n        return {\n          text: \"A comma is needed here to separate parts of the sentence.\",\n          type: 'error'\n        };\n      default:\n        return {\n          text: \"That's not quite right. Try again!\",\n          type: 'error'\n        };\n    }\n  };\n  const handleCharacterSelect = type => {\n    if (!currentPhrase) return;\n\n    // Start timer on first interaction if not started\n    if (!hasStarted) {\n      startTimer();\n    }\n    setSelectedMark(type);\n    const isCorrectMark = type === currentPhrase.answer;\n    setIsCorrect(isCorrectMark);\n    if (isCorrectMark) {\n      setScore(prev => ({\n        ...prev,\n        correct: prev.correct + 1\n      }));\n    } else {\n      setScore(prev => ({\n        ...prev,\n        incorrect: prev.incorrect + 1\n      }));\n    }\n\n    // Wait for animation then move to next phrase\n    setTimeout(() => {\n      setSelectedMark(null);\n      setIsCorrect(null);\n      goToNextPhrase();\n    }, 1000);\n  };\n  const goToNextPhrase = () => {\n    const nextIndex = (currentPhraseIndex + 1) % phrases.length;\n    setCurrentPhraseIndex(nextIndex);\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    e.currentTarget.classList.remove('dragover');\n    const droppedType = e.dataTransfer.getData('application/punctuation');\n    console.log('Dropped type:', droppedType); // Add this for debugging\n\n    if (droppedType) {\n      handleCharacterSelect(droppedType);\n    }\n  };\n  const handleDragOver = e => {\n    e.preventDefault(); // This is crucial for enabling drop\n    e.currentTarget.style.backgroundColor = 'rgba(0, 0, 0, 0.1)';\n  };\n  const handleDragLeave = e => {\n    e.preventDefault();\n    e.currentTarget.style.backgroundColor = 'transparent';\n  };\n  const handleDragStart = e => {\n    startTimer();\n    e.dataTransfer.setData('text/plain', e.currentTarget.id);\n  };\n  const renderPhrase = () => {\n    if (!currentPhrase) return null;\n    const words = currentPhrase.text.split(' ');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"phrase-container\",\n      children: words.map((word, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"word\",\n          children: word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this), (currentPhrase.position === index || index === words.length - 1 && currentPhrase.position === 'end') && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"drop-zone\",\n          onDragOver: e => {\n            e.preventDefault();\n          },\n          onDrop: handleDrop,\n          children: selectedMark && /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n            mark: selectedMark,\n            onClick: () => {},\n            disabled: false,\n            isCorrect: isCorrect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this);\n  };\n  const handleGameOverClose = () => {\n    setGameOverOpen(false);\n    navigate('/select');\n  };\n  const formatTime = seconds => {\n    if (seconds === null) return \"0:00\";\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n  const TimerDisplay = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `timer ${!hasStarted || timeLeft === null ? '' : timeLeft < 10 ? 'timer-warning' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"timer-text\",\n      children: formatTime(timeLeft)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n  React.useEffect(() => {\n    if (settings.timer) {\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [settings.timer, settings.timeLimit]);\n  const TopBar = () => /*#__PURE__*/_jsxDEV(\"header\", {\n    className: \"top-bar\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => navigate('/select'),\n      children: \"DONE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"score-display\",\n      children: [\"CORRECT: \", score.correct, \" INCORRECT: \", score.incorrect]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 304,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-screen\",\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"game-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"phrase-container\",\n        children: renderPhrase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"character-controls\",\n      children: shuffledTypes.map(type => /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n        type: type,\n        onClick: () => handleCharacterSelect(type),\n        isCorrect: undefined,\n        isDraggable: true,\n        onDragStart: () => setSelectedMark(null),\n        onSelect: handleCharacterSelect\n      }, type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), settings.timer && /*#__PURE__*/_jsxDEV(TimerDisplay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(GameOverDialog, {\n      open: gameOverOpen,\n      onClose: handleGameOverClose,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 5\n  }, this);\n};\n_s(GameScreen, \"N/RBDDCWAvXvrcHY9Q4yc6KVEpk=\", false, function () {\n  return [useNavigate, useGame];\n});\n_c2 = GameScreen;\nexport default GameScreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"GameOverDialog\");\n$RefreshReg$(_c2, \"GameScreen\");","map":{"version":3,"names":["React","useNavigate","useGame","PunctuationCharacter","shuffleArray","Button","jsxDEV","_jsxDEV","samplePhrases","period","text","answer","position","exclamation","question","comma","punctuationTypes","GameOverDialog","open","onClose","score","className","children","fileName","_jsxFileName","lineNumber","columnNumber","correct","incorrect","onClick","_c","GameScreen","_s","navigate","punctuationType","settings","currentPhraseIndex","setCurrentPhraseIndex","useState","currentPhrase","setCurrentPhrase","selectedMark","setSelectedMark","isCorrect","setIsCorrect","setScore","hasStarted","setHasStarted","timeLeft","setTimeLeft","gameOverOpen","setGameOverOpen","shuffledTypes","setShuffledTypes","feedback","setFeedback","timerRef","useRef","phrases","useMemo","Object","values","flat","useEffect","startTimer","useCallback","timer","timeLimit","current","setInterval","prev","clearInterval","handleFirstInteraction","getFeedbackMessage","type","correctType","handleCharacterSelect","isCorrectMark","setTimeout","goToNextPhrase","nextIndex","length","handleDrop","e","preventDefault","currentTarget","classList","remove","droppedType","dataTransfer","getData","console","log","handleDragOver","style","backgroundColor","handleDragLeave","handleDragStart","setData","id","renderPhrase","words","split","map","word","index","Fragment","onDragOver","onDrop","mark","disabled","handleGameOverClose","formatTime","seconds","minutes","Math","floor","remainingSeconds","toString","padStart","TimerDisplay","TopBar","undefined","isDraggable","onDragStart","onSelect","_c2","$RefreshReg$"],"sources":["/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/GameScreen.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport PunctuationCharacter from '../components/PunctuationCharacter';\nimport { shuffleArray } from '../utils/shuffle';\nimport { Button } from '../components/Button';\nimport '../styles/GameScreen.css';\n\ntype Phrase = {\n  text: string;\n  answer: string;\n  position: 'end' | number; // 'end' or index where punctuation should go\n};\n\ntype PhraseCollection = {\n  period: Phrase[];\n  exclamation: Phrase[];\n  question: Phrase[];\n  comma: Phrase[];\n};\n\nconst samplePhrases: PhraseCollection = {\n  period: [\n    { text: \"I love to play in the park\", answer: \"period\", position: 'end' },\n    { text: \"The sun is shining today\", answer: \"period\", position: 'end' },\n  ],\n  exclamation: [\n    { text: \"What a wonderful day\", answer: \"exclamation\", position: 'end' },\n    { text: \"I canâ€™t believe it\", answer: \"exclamation\", position: 'end' },\n  ],\n  question: [\n    { text: \"How are you today\", answer: \"question\", position: 'end' },\n    { text: \"Where did you go\", answer: \"question\", position: 'end' },\n  ],\n  comma: [\n    { text: \"After the movie we went home\", answer: \"comma\", position: 2 }, // After index 2 (after \"movie\")\n    { text: \"Yes I would love to\", answer: \"comma\", position: 0 }, // After index 1 (after \"Yes\")\n  ],\n};\n\ntype PunctuationType = 'period' | 'exclamation' | 'question' | 'comma';\n\nconst punctuationTypes: PunctuationType[] = ['period', 'exclamation', 'question', 'comma'];\n\ninterface FeedbackMessage {\n  text: string;\n  type: 'success' | 'error';\n}\n\ninterface GameOverDialogProps {\n  open: boolean;\n  onClose: () => void;\n  score: { correct: number; incorrect: number };\n}\n\nconst GameOverDialog = ({ open, onClose, score }: GameOverDialogProps) => (\n  <dialog open={open} className=\"game-over-dialog\">\n    <div className=\"dialog-content\">\n      <h2>Time's Up!</h2>\n      <p className=\"score-correct\">Correct Answers: {score.correct}</p>\n      <p className=\"score-incorrect\">Incorrect Answers: {score.incorrect}</p>\n      <p className=\"feedback\">\n        {score.correct > score.incorrect \n          ? \"Great job! You're getting really good at this!\" \n          : \"Keep practicing, you're getting better!\"}\n      </p>\n      <div className=\"dialog-actions\">\n        <Button onClick={onClose}>Play Again</Button>\n      </div>\n    </div>\n  </dialog>\n);\n\nconst GameScreen = () => {\n  const navigate = useNavigate();\n  const { punctuationType, settings } = useGame();\n  const [currentPhraseIndex, setCurrentPhraseIndex] = React.useState(0);\n  const [currentPhrase, setCurrentPhrase] = React.useState<Phrase | null>(null);\n  const [selectedMark, setSelectedMark] = React.useState<PunctuationType | null>(null);\n  const [isCorrect, setIsCorrect] = React.useState<boolean | null>(null);\n  const [score, setScore] = React.useState({ correct: 0, incorrect: 0 });\n  const [hasStarted, setHasStarted] = React.useState(false);\n  const [timeLeft, setTimeLeft] = React.useState<number | null>(null);\n  const [gameOverOpen, setGameOverOpen] = React.useState(false);\n  const [shuffledTypes, setShuffledTypes] = React.useState<PunctuationType[]>(['period', 'exclamation', 'question', 'comma']);\n  const [feedback, setFeedback] = React.useState<FeedbackMessage | null>(null);\n  const timerRef = React.useRef<NodeJS.Timeout | null>(null);\n\n  const phrases = React.useMemo(() => shuffleArray(Object.values(samplePhrases).flat()), []);\n\n  React.useEffect(() => {\n    setCurrentPhrase(phrases[currentPhraseIndex]);\n  }, [currentPhraseIndex, phrases]);\n\n  const startTimer = React.useCallback(() => {\n    if (!hasStarted && settings.timer) {\n      setHasStarted(true);\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [hasStarted, settings.timer, settings.timeLimit]);\n\n  React.useEffect(() => {\n    if (hasStarted && settings.timer && timeLeft !== null && timeLeft > 0) {\n      timerRef.current = setInterval(() => {\n        setTimeLeft((prev) => {\n          if (prev === null || prev <= 1) {\n            if (timerRef.current) {\n              clearInterval(timerRef.current);\n            }\n            setGameOverOpen(true);\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n\n      return () => {\n        if (timerRef.current) {\n          clearInterval(timerRef.current);\n        }\n      };\n    }\n  }, [hasStarted, settings.timer, timeLeft]);\n\n  React.useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, []);\n\n  const handleFirstInteraction = () => {\n    startTimer();\n  };\n\n  const getFeedbackMessage = (type: string, isCorrect: boolean): FeedbackMessage => {\n    if (isCorrect) {\n      return {\n        text: \"Great job! That's exactly right!\",\n        type: 'success'\n      };\n    }\n\n    const correctType = currentPhrase?.answer;\n    switch (correctType) {\n      case 'period':\n        return {\n          text: \"This sentence needs a period to show it's complete.\",\n          type: 'error'\n        };\n      case 'question':\n        return {\n          text: \"This is a question, so it needs a question mark.\",\n          type: 'error'\n        };\n      case 'exclamation':\n        return {\n          text: \"This sentence shows strong feeling or emotion, so it needs an exclamation mark!\",\n          type: 'error'\n        };\n      case 'comma':\n        return {\n          text: \"A comma is needed here to separate parts of the sentence.\",\n          type: 'error'\n        };\n      default:\n        return {\n          text: \"That's not quite right. Try again!\",\n          type: 'error'\n        };\n    }\n  };\n\n  const handleCharacterSelect = (type: PunctuationType) => {\n    if (!currentPhrase) return;\n\n    // Start timer on first interaction if not started\n    if (!hasStarted) {\n      startTimer();\n    }\n\n    setSelectedMark(type);\n    const isCorrectMark = type === currentPhrase.answer;\n    setIsCorrect(isCorrectMark);\n\n    if (isCorrectMark) {\n      setScore(prev => ({\n        ...prev,\n        correct: prev.correct + 1\n      }));\n    } else {\n      setScore(prev => ({\n        ...prev,\n        incorrect: prev.incorrect + 1\n      }));\n    }\n\n    // Wait for animation then move to next phrase\n    setTimeout(() => {\n      setSelectedMark(null);\n      setIsCorrect(null);\n      goToNextPhrase();\n    }, 1000);\n  };\n\n  const goToNextPhrase = () => {\n    const nextIndex = (currentPhraseIndex + 1) % phrases.length;\n    setCurrentPhraseIndex(nextIndex);\n  };\n\n  const handleDrop = (e: React.DragEvent<HTMLElement>) => {\n    e.preventDefault();\n    e.currentTarget.classList.remove('dragover');\n    const droppedType = e.dataTransfer.getData('application/punctuation') as PunctuationType;\n    \n    console.log('Dropped type:', droppedType); // Add this for debugging\n    \n    if (droppedType) {\n      handleCharacterSelect(droppedType);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault(); // This is crucial for enabling drop\n    e.currentTarget.style.backgroundColor = 'rgba(0, 0, 0, 0.1)';\n  };\n\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.currentTarget.style.backgroundColor = 'transparent';\n  };\n\n  const handleDragStart = (e: React.DragEvent) => {\n    startTimer();\n    e.dataTransfer.setData('text/plain', e.currentTarget.id);\n  };\n\n  const renderPhrase = () => {\n    if (!currentPhrase) return null;\n\n    const words = currentPhrase.text.split(' ');\n    \n    return (\n      <div className=\"phrase-container\">\n        {words.map((word, index) => (\n          <React.Fragment key={index}>\n            <span className=\"word\">\n              {word}\n            </span>\n            {(currentPhrase.position === index || \n              (index === words.length - 1 && currentPhrase.position === 'end')) && (\n              <span\n                className=\"drop-zone\"\n                onDragOver={(e) => {\n                  e.preventDefault();\n                }}\n                onDrop={handleDrop}\n              >\n                {selectedMark && (\n                  <PunctuationCharacter\n                    mark={selectedMark}\n                    onClick={() => {}}\n                    disabled={false}\n                    isCorrect={isCorrect}\n                  />\n                )}\n              </span>\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n    );\n  };\n\n  const handleGameOverClose = () => {\n    setGameOverOpen(false);\n    navigate('/select');\n  };\n\n  const formatTime = (seconds: number | null): string => {\n    if (seconds === null) return \"0:00\";\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const TimerDisplay = () => (\n    <div className={`timer ${(!hasStarted || timeLeft === null) ? '' : \n      timeLeft < 10 ? 'timer-warning' : ''}`}>\n      <span className=\"timer-text\">\n        {formatTime(timeLeft)}\n      </span>\n    </div>\n  );\n\n  React.useEffect(() => {\n    if (settings.timer) {\n      setTimeLeft(settings.timeLimit);\n    }\n  }, [settings.timer, settings.timeLimit]);\n\n  const TopBar = () => (\n    <header className=\"top-bar\">\n      <Button onClick={() => navigate('/select')}>\n        DONE\n      </Button>\n      <p className=\"score-display\">\n        CORRECT: {score.correct} INCORRECT: {score.incorrect}\n      </p>\n    </header>\n  );\n\n  return (\n    <div className=\"game-screen\">\n      <TopBar />\n      \n      <main className=\"game-content\">\n        <div className=\"phrase-container\">\n          {renderPhrase()}\n        </div>\n      </main>\n\n      <footer className=\"character-controls\">\n        {shuffledTypes.map((type) => (\n          <PunctuationCharacter\n            key={type}\n            type={type}\n            onClick={() => handleCharacterSelect(type)}\n            isCorrect={undefined}\n            isDraggable={true}\n            onDragStart={() => setSelectedMark(null)}\n            onSelect={handleCharacterSelect}\n          />\n        ))}\n      </footer>\n\n      {settings.timer && <TimerDisplay />}\n      \n      <GameOverDialog \n        open={gameOverOpen} \n        onClose={handleGameOverClose}\n        score={score}\n      />\n    </div>\n  );\n};\n\nexport default GameScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}