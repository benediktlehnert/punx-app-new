{"ast":null,"code":"var _jsxFileName = \"/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/GameScreen.tsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { Box, Typography, Button, Grid } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport PunctuationCharacter from '../components/PunctuationCharacter';\nimport { shuffleArray } from '../utils/shuffle';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport SettingsModal from '../components/SettingsModal';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst samplePhrases = {\n  period: [{\n    text: \"I love to play in the park\",\n    answer: \"period\",\n    position: 'end'\n  }, {\n    text: \"The sun is shining today\",\n    answer: \"period\",\n    position: 'end'\n  }],\n  exclamation: [{\n    text: \"What a wonderful day\",\n    answer: \"exclamation\",\n    position: 'end'\n  }, {\n    text: \"I can't believe it\",\n    answer: \"exclamation\",\n    position: 'end'\n  }],\n  question: [{\n    text: \"How are you today\",\n    answer: \"question\",\n    position: 'end'\n  }, {\n    text: \"Where did you go\",\n    answer: \"question\",\n    position: 'end'\n  }],\n  comma: [{\n    text: \"After the movie we went home\",\n    answer: \"comma\",\n    position: 2\n  },\n  // After index 2 (after \"movie\")\n  {\n    text: \"Yes I would love to\",\n    answer: \"comma\",\n    position: 1\n  } // After index 1 (after \"Yes\")\n  ]\n};\nconst punctuationTypes = ['period', 'exclamation', 'question', 'comma'];\nconst GameScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    punctuationType\n  } = useGame();\n  const [currentPhrase, setCurrentPhrase] = React.useState(null);\n  const [isCorrect, setIsCorrect] = React.useState(null);\n  const [shuffledTypes, setShuffledTypes] = React.useState(punctuationTypes);\n  const [settingsOpen, setSettingsOpen] = React.useState(false);\n  const [settings, setSettings] = React.useState({\n    sound: true,\n    difficulty: 1,\n    timer: false\n  });\n  const loadNewPhrase = React.useCallback(() => {\n    if (punctuationType && punctuationType !== 'shuffle' && samplePhrases[punctuationType]) {\n      const phrases = samplePhrases[punctuationType];\n      setCurrentPhrase(phrases[Math.floor(Math.random() * phrases.length)]);\n      setShuffledTypes(shuffleArray(punctuationTypes));\n    }\n  }, [punctuationType]);\n  React.useEffect(() => {\n    loadNewPhrase();\n  }, [loadNewPhrase]);\n  const handleCharacterSelect = type => {\n    if (!currentPhrase) return;\n    const correct = type === currentPhrase.answer;\n    setIsCorrect(correct);\n    if (correct) {\n      setTimeout(loadNewPhrase, 1500);\n      setIsCorrect(null);\n    }\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    const type = e.dataTransfer.getData('text/plain');\n    if (!currentPhrase) return;\n\n    // Check if the drop position matches the correct position\n    handleCharacterSelect(type);\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n    e.currentTarget.style.backgroundColor = '#f0f0f0';\n  };\n  const handleDragLeave = e => {\n    e.currentTarget.style.backgroundColor = 'transparent';\n  };\n  const handleSettingsOpen = () => setSettingsOpen(true);\n  const handleSettingsClose = () => setSettingsOpen(false);\n  const handleSettingsChange = newSettings => {\n    setSettings(newSettings);\n    // Here you can implement the logic for applying the new settings\n  };\n  const renderPhrase = () => {\n    if (!currentPhrase) return null;\n    const words = currentPhrase.text.split(' ');\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        gap: 1\n      },\n      children: words.map((word, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          component: \"span\",\n          children: word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this), (currentPhrase.position === index || index === words.length - 1 && currentPhrase.position === 'end') && /*#__PURE__*/_jsxDEV(Box, {\n          component: \"div\",\n          sx: {\n            width: 20,\n            height: 40,\n            border: '2px dashed #ccc',\n            borderRadius: 1,\n            mx: 1,\n            transition: 'background-color 0.3s'\n          },\n          onDrop: handleDrop,\n          onDragOver: handleDragOver,\n          onDragLeave: handleDragLeave\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 4,\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => navigate('/'),\n      sx: {\n        position: 'absolute',\n        top: 16,\n        left: 16\n      },\n      children: \"Back to Menu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSettingsOpen,\n      sx: {\n        position: 'absolute',\n        top: 16,\n        right: 16\n      },\n      children: /*#__PURE__*/_jsxDEV(SettingsIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SettingsModal, {\n      open: settingsOpen,\n      onClose: handleSettingsClose,\n      settings: settings,\n      onSettingsChange: handleSettingsChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), currentPhrase && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        component: \"div\",\n        sx: {\n          mb: 8\n        },\n        children: renderPhrase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        justifyContent: \"center\",\n        children: shuffledTypes.map(type => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(PunctuationCharacter, {\n            type: type,\n            onClick: () => handleCharacterSelect(type),\n            isCorrect: isCorrect !== null ? type === currentPhrase.answer : undefined,\n            isDraggable: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }, this)\n        }, type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(GameScreen, \"KKQBTIePXGpRDed12oaw+kH/Low=\", false, function () {\n  return [useNavigate, useGame];\n});\n_c = GameScreen;\nexport default GameScreen;\nvar _c;\n$RefreshReg$(_c, \"GameScreen\");","map":{"version":3,"names":["React","Box","Typography","Button","Grid","useNavigate","useGame","PunctuationCharacter","shuffleArray","SettingsIcon","SettingsModal","jsxDEV","_jsxDEV","Fragment","_Fragment","samplePhrases","period","text","answer","position","exclamation","question","comma","punctuationTypes","GameScreen","_s","navigate","punctuationType","currentPhrase","setCurrentPhrase","useState","isCorrect","setIsCorrect","shuffledTypes","setShuffledTypes","settingsOpen","setSettingsOpen","settings","setSettings","sound","difficulty","timer","loadNewPhrase","useCallback","phrases","Math","floor","random","length","useEffect","handleCharacterSelect","type","correct","setTimeout","handleDrop","e","preventDefault","dataTransfer","getData","handleDragOver","currentTarget","style","backgroundColor","handleDragLeave","handleSettingsOpen","handleSettingsClose","handleSettingsChange","newSettings","renderPhrase","words","split","sx","display","flexWrap","justifyContent","gap","children","map","word","index","variant","component","fileName","_jsxFileName","lineNumber","columnNumber","width","height","border","borderRadius","mx","transition","onDrop","onDragOver","onDragLeave","p","textAlign","onClick","top","left","right","open","onClose","onSettingsChange","mb","container","spacing","item","undefined","isDraggable","_c","$RefreshReg$"],"sources":["/Users/benediktlehnert/Documents/GitHub/punx-app-new/src/screens/GameScreen.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Box, Typography, Button, Grid } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../context/GameContext';\nimport PunctuationCharacter from '../components/PunctuationCharacter';\nimport { shuffleArray } from '../utils/shuffle';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport SettingsModal from '../components/SettingsModal';\n\ntype Phrase = {\n  text: string;\n  answer: string;\n  position: 'end' | number; // 'end' or index where punctuation should go\n};\n\ntype PhraseCollection = {\n  period: Phrase[];\n  exclamation: Phrase[];\n  question: Phrase[];\n  comma: Phrase[];\n};\n\nconst samplePhrases: PhraseCollection = {\n  period: [\n    { text: \"I love to play in the park\", answer: \"period\", position: 'end' },\n    { text: \"The sun is shining today\", answer: \"period\", position: 'end' },\n  ],\n  exclamation: [\n    { text: \"What a wonderful day\", answer: \"exclamation\", position: 'end' },\n    { text: \"I can't believe it\", answer: \"exclamation\", position: 'end' },\n  ],\n  question: [\n    { text: \"How are you today\", answer: \"question\", position: 'end' },\n    { text: \"Where did you go\", answer: \"question\", position: 'end' },\n  ],\n  comma: [\n    { text: \"After the movie we went home\", answer: \"comma\", position: 2 }, // After index 2 (after \"movie\")\n    { text: \"Yes I would love to\", answer: \"comma\", position: 1 }, // After index 1 (after \"Yes\")\n  ],\n};\n\nconst punctuationTypes = ['period', 'exclamation', 'question', 'comma'];\n\nconst GameScreen = () => {\n  const navigate = useNavigate();\n  const { punctuationType } = useGame();\n  const [currentPhrase, setCurrentPhrase] = React.useState<Phrase | null>(null);\n  const [isCorrect, setIsCorrect] = React.useState<boolean | null>(null);\n  const [shuffledTypes, setShuffledTypes] = React.useState(punctuationTypes);\n  const [settingsOpen, setSettingsOpen] = React.useState(false);\n  const [settings, setSettings] = React.useState({\n    sound: true,\n    difficulty: 1,\n    timer: false\n  });\n\n  const loadNewPhrase = React.useCallback(() => {\n    if (punctuationType && punctuationType !== 'shuffle' && samplePhrases[punctuationType]) {\n      const phrases = samplePhrases[punctuationType];\n      setCurrentPhrase(phrases[Math.floor(Math.random() * phrases.length)]);\n      setShuffledTypes(shuffleArray(punctuationTypes));\n    }\n  }, [punctuationType]);\n\n  React.useEffect(() => {\n    loadNewPhrase();\n  }, [loadNewPhrase]);\n\n  const handleCharacterSelect = (type: string) => {\n    if (!currentPhrase) return;\n    \n    const correct = type === currentPhrase.answer;\n    setIsCorrect(correct);\n    \n    if (correct) {\n      setTimeout(loadNewPhrase, 1500);\n      setIsCorrect(null);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    const type = e.dataTransfer.getData('text/plain');\n    \n    if (!currentPhrase) return;\n    \n    // Check if the drop position matches the correct position\n    handleCharacterSelect(type);\n  };\n\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.currentTarget.style.backgroundColor = '#f0f0f0';\n  };\n\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n    e.currentTarget.style.backgroundColor = 'transparent';\n  };\n\n  const handleSettingsOpen = () => setSettingsOpen(true);\n  const handleSettingsClose = () => setSettingsOpen(false);\n  const handleSettingsChange = (newSettings: any) => {\n    setSettings(newSettings);\n    // Here you can implement the logic for applying the new settings\n  };\n\n  const renderPhrase = () => {\n    if (!currentPhrase) return null;\n\n    const words = currentPhrase.text.split(' ');\n    \n    return (\n      <Box sx={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center', gap: 1 }}>\n        {words.map((word, index) => (\n          <React.Fragment key={index}>\n            <Typography variant=\"h4\" component=\"span\">\n              {word}\n            </Typography>\n            {(currentPhrase.position === index || \n              (index === words.length - 1 && currentPhrase.position === 'end')) && (\n              <Box\n                component=\"div\"\n                sx={{\n                  width: 20,\n                  height: 40,\n                  border: '2px dashed #ccc',\n                  borderRadius: 1,\n                  mx: 1,\n                  transition: 'background-color 0.3s'\n                }}\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragLeave={handleDragLeave}\n              />\n            )}\n          </React.Fragment>\n        ))}\n      </Box>\n    );\n  };\n\n  return (\n    <Box sx={{ p: 4, textAlign: 'center' }}>\n      <Button onClick={() => navigate('/')} sx={{ position: 'absolute', top: 16, left: 16 }}>\n        Back to Menu\n      </Button>\n      \n      <Button\n        onClick={handleSettingsOpen}\n        sx={{ position: 'absolute', top: 16, right: 16 }}\n      >\n        <SettingsIcon />\n      </Button>\n\n      <SettingsModal\n        open={settingsOpen}\n        onClose={handleSettingsClose}\n        settings={settings}\n        onSettingsChange={handleSettingsChange}\n      />\n\n      {currentPhrase && (\n        <>\n          <Box component=\"div\" sx={{ mb: 8 }}>\n            {renderPhrase()}\n          </Box>\n\n          <Grid container spacing={2} justifyContent=\"center\">\n            {shuffledTypes.map((type) => (\n              <Grid item key={type}>\n                <PunctuationCharacter\n                  type={type}\n                  onClick={() => handleCharacterSelect(type)}\n                  isCorrect={isCorrect !== null ? type === currentPhrase.answer : undefined}\n                  isDraggable={true}\n                />\n              </Grid>\n            ))}\n          </Grid>\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default GameScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}